
MySmarthomeProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000479e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00800060  0000479e  00004832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080015c  0080015c  0000492e  2**0
                  ALLOC
  3 .stab         000039e4  00000000  00000000  00004930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001246  00000000  00000000  00008314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000955a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000969a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000980a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b453  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c33e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d0ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__vector_6>
      1c:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__vector_7>
      20:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__vector_8>
      24:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 35       	cpi	r26, 0x5C	; 92
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e5       	ldi	r26, 0x5C	; 92
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <main>
      8a:	0c 94 cd 23 	jmp	0x479a	; 0x479a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 96 23 	jmp	0x472c	; 0x472c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e5       	ldi	r26, 0x54	; 84
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 be 23 	jmp	0x477c	; 0x477c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 be 23 	jmp	0x477c	; 0x477c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 96 23 	jmp	0x472c	; 0x472c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e5       	ldi	r24, 0x54	; 84
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 be 23 	jmp	0x477c	; 0x477c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 be 23 	jmp	0x477c	; 0x477c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 be 23 	jmp	0x477c	; 0x477c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vsetPINDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vsetPINDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vsetPINDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <DIO_vsetPINDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vsetPINDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vsetPINDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <DIO_vsetPINDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vsetPINDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <DIO_vsetPINDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vsetPINDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <DIO_vsetPINDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	a1 f4       	brne	.+40     	; 0xbce <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vsetPINDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vsetPINDir+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	98 c0       	rjmp	.+304    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vsetPINDir+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vsetPINDir+0xa2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_vsetPINDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_vsetPINDir+0xd2>
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	6c c0       	rjmp	.+216    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vsetPINDir+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vsetPINDir+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_vsetPINDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_vsetPINDir+0x12a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vsetPINDir+0x156>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vsetPINDir+0x152>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_vsetPINDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_vsetPINDir+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_vsetPINDir+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_vsetPINDir+0x1aa>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
		}
		break;
		default: break;
	}
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_write>:


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_write+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_write+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_write+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <DIO_write+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_write+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_write+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <DIO_write+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_write+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <DIO_write+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_write+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <DIO_write+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_write+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_write+0x7a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	98 c0       	rjmp	.+304    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0xa6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_write+0xa2>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a1 f4       	brne	.+40     	; 0xdee <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_write+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_write+0xd2>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     dee:	a8 e3       	ldi	r26, 0x38	; 56
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e3       	ldi	r30, 0x38	; 56
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_write+0xfe>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_write+0xfa>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_write+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_write+0x12a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_write+0x156>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_write+0x152>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_write+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_write+0x182>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_write+0x1ae>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_write+0x1aa>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8read+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8read+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value=0;
     ee8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3d 83       	std	Y+5, r19	; 0x05
     ef2:	2c 83       	std	Y+4, r18	; 0x04
     ef4:	4c 81       	ldd	r20, Y+4	; 0x04
     ef6:	5d 81       	ldd	r21, Y+5	; 0x05
     ef8:	42 34       	cpi	r20, 0x42	; 66
     efa:	51 05       	cpc	r21, r1
     efc:	b1 f1       	breq	.+108    	; 0xf6a <DIO_u8read+0x94>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	83 34       	cpi	r24, 0x43	; 67
     f04:	91 05       	cpc	r25, r1
     f06:	34 f4       	brge	.+12     	; 0xf14 <DIO_u8read+0x3e>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	21 34       	cpi	r18, 0x41	; 65
     f0e:	31 05       	cpc	r19, r1
     f10:	71 f0       	breq	.+28     	; 0xf2e <DIO_u8read+0x58>
     f12:	84 c0       	rjmp	.+264    	; 0x101c <DIO_u8read+0x146>
     f14:	4c 81       	ldd	r20, Y+4	; 0x04
     f16:	5d 81       	ldd	r21, Y+5	; 0x05
     f18:	43 34       	cpi	r20, 0x43	; 67
     f1a:	51 05       	cpc	r21, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_u8read+0x4a>
     f1e:	43 c0       	rjmp	.+134    	; 0xfa6 <DIO_u8read+0xd0>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	84 34       	cpi	r24, 0x44	; 68
     f26:	91 05       	cpc	r25, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_u8read+0x56>
     f2a:	5b c0       	rjmp	.+182    	; 0xfe2 <DIO_u8read+0x10c>
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     f2e:	e9 e3       	ldi	r30, 0x39	; 57
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_u8read+0x72>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	2a 95       	dec	r18
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_u8read+0x6e>
     f4c:	9a 01       	movw	r18, r20
     f4e:	28 23       	and	r18, r24
     f50:	39 23       	and	r19, r25
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_u8read+0x8a>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_u8read+0x86>
     f64:	ca 01       	movw	r24, r20
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	59 c0       	rjmp	.+178    	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     f6a:	e6 e3       	ldi	r30, 0x36	; 54
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_u8read+0xae>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	2a 95       	dec	r18
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_u8read+0xaa>
     f88:	9a 01       	movw	r18, r20
     f8a:	28 23       	and	r18, r24
     f8c:	39 23       	and	r19, r25
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8read+0xc6>
     f98:	55 95       	asr	r21
     f9a:	47 95       	ror	r20
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8read+0xc2>
     fa0:	ca 01       	movw	r24, r20
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	3b c0       	rjmp	.+118    	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     fa6:	e3 e3       	ldi	r30, 0x33	; 51
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_u8read+0xea>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	2a 95       	dec	r18
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_u8read+0xe6>
     fc4:	9a 01       	movw	r18, r20
     fc6:	28 23       	and	r18, r24
     fc8:	39 23       	and	r19, r25
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_u8read+0x102>
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_u8read+0xfe>
     fdc:	ca 01       	movw	r24, r20
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	1d c0       	rjmp	.+58     	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     fe2:	e0 e3       	ldi	r30, 0x30	; 48
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_u8read+0x126>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	2a 95       	dec	r18
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_u8read+0x122>
    1000:	9a 01       	movw	r18, r20
    1002:	28 23       	and	r18, r24
    1004:	39 23       	and	r19, r25
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8read+0x13e>
    1010:	55 95       	asr	r21
    1012:	47 95       	ror	r20
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8read+0x13a>
    1018:	ca 01       	movw	r24, r20
    101a:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return return_value ;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_toggle+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_toggle+0x8>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	82 34       	cpi	r24, 0x42	; 66
    104e:	91 05       	cpc	r25, r1
    1050:	51 f1       	breq	.+84     	; 0x10a6 <DIO_toggle+0x78>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	23 34       	cpi	r18, 0x43	; 67
    1058:	31 05       	cpc	r19, r1
    105a:	34 f4       	brge	.+12     	; 0x1068 <DIO_toggle+0x3a>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	81 34       	cpi	r24, 0x41	; 65
    1062:	91 05       	cpc	r25, r1
    1064:	61 f0       	breq	.+24     	; 0x107e <DIO_toggle+0x50>
    1066:	5a c0       	rjmp	.+180    	; 0x111c <DIO_toggle+0xee>
    1068:	2b 81       	ldd	r18, Y+3	; 0x03
    106a:	3c 81       	ldd	r19, Y+4	; 0x04
    106c:	23 34       	cpi	r18, 0x43	; 67
    106e:	31 05       	cpc	r19, r1
    1070:	71 f1       	breq	.+92     	; 0x10ce <DIO_toggle+0xa0>
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	84 34       	cpi	r24, 0x44	; 68
    1078:	91 05       	cpc	r25, r1
    107a:	e9 f1       	breq	.+122    	; 0x10f6 <DIO_toggle+0xc8>
    107c:	4f c0       	rjmp	.+158    	; 0x111c <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    107e:	ab e3       	ldi	r26, 0x3B	; 59
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	eb e3       	ldi	r30, 0x3B	; 59
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_toggle+0x6e>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_toggle+0x6a>
    10a0:	84 27       	eor	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	3b c0       	rjmp	.+118    	; 0x111c <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    10a6:	a8 e3       	ldi	r26, 0x38	; 56
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e3       	ldi	r30, 0x38	; 56
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_toggle+0x96>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_toggle+0x92>
    10c8:	84 27       	eor	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	27 c0       	rjmp	.+78     	; 0x111c <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_toggle+0xbe>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_toggle+0xba>
    10f0:	84 27       	eor	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	13 c0       	rjmp	.+38     	; 0x111c <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    10f6:	a2 e3       	ldi	r26, 0x32	; 50
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_toggle+0xe6>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_toggle+0xe2>
    1118:	84 27       	eor	r24, r20
    111a:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <DIO_write_port>:
void DIO_write_port(uint8 portname,uint8 portvalue)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_write_port+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_write_port+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	82 34       	cpi	r24, 0x42	; 66
    114a:	91 05       	cpc	r25, r1
    114c:	d9 f0       	breq	.+54     	; 0x1184 <DIO_write_port+0x5a>
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	23 34       	cpi	r18, 0x43	; 67
    1154:	31 05       	cpc	r19, r1
    1156:	34 f4       	brge	.+12     	; 0x1164 <DIO_write_port+0x3a>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 34       	cpi	r24, 0x41	; 65
    115e:	91 05       	cpc	r25, r1
    1160:	61 f0       	breq	.+24     	; 0x117a <DIO_write_port+0x50>
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <DIO_write_port+0x76>
    1164:	2b 81       	ldd	r18, Y+3	; 0x03
    1166:	3c 81       	ldd	r19, Y+4	; 0x04
    1168:	23 34       	cpi	r18, 0x43	; 67
    116a:	31 05       	cpc	r19, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <DIO_write_port+0x64>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	84 34       	cpi	r24, 0x44	; 68
    1174:	91 05       	cpc	r25, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <DIO_write_port+0x6e>
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 83       	st	Z, r24
    1182:	0e c0       	rjmp	.+28     	; 0x11a0 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    118e:	e5 e3       	ldi	r30, 0x35	; 53
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <dio_write_highnibble>:
void dio_write_highnibble(uint8 portname,uint8 value)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <dio_write_highnibble+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <dio_write_highnibble+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	82 34       	cpi	r24, 0x42	; 66
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f1       	breq	.+66     	; 0x1214 <dio_write_highnibble+0x66>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	23 34       	cpi	r18, 0x43	; 67
    11d8:	31 05       	cpc	r19, r1
    11da:	34 f4       	brge	.+12     	; 0x11e8 <dio_write_highnibble+0x3a>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	81 34       	cpi	r24, 0x41	; 65
    11e2:	91 05       	cpc	r25, r1
    11e4:	61 f0       	breq	.+24     	; 0x11fe <dio_write_highnibble+0x50>
    11e6:	36 c0       	rjmp	.+108    	; 0x1254 <dio_write_highnibble+0xa6>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	23 34       	cpi	r18, 0x43	; 67
    11ee:	31 05       	cpc	r19, r1
    11f0:	e1 f0       	breq	.+56     	; 0x122a <dio_write_highnibble+0x7c>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	84 34       	cpi	r24, 0x44	; 68
    11f8:	91 05       	cpc	r25, r1
    11fa:	11 f1       	breq	.+68     	; 0x1240 <dio_write_highnibble+0x92>
    11fc:	2b c0       	rjmp	.+86     	; 0x1254 <dio_write_highnibble+0xa6>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
    11fe:	ab e3       	ldi	r26, 0x3B	; 59
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	eb e3       	ldi	r30, 0x3B	; 59
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	98 2f       	mov	r25, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	89 2b       	or	r24, r25
    1210:	8c 93       	st	X, r24
    1212:	20 c0       	rjmp	.+64     	; 0x1254 <dio_write_highnibble+0xa6>
		break ;
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
    1214:	a8 e3       	ldi	r26, 0x38	; 56
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e8 e3       	ldi	r30, 0x38	; 56
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	98 2f       	mov	r25, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 7f       	andi	r24, 0xF0	; 240
    1224:	89 2b       	or	r24, r25
    1226:	8c 93       	st	X, r24
    1228:	15 c0       	rjmp	.+42     	; 0x1254 <dio_write_highnibble+0xa6>
		break ;
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
    122a:	a5 e3       	ldi	r26, 0x35	; 53
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	98 2f       	mov	r25, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 7f       	andi	r24, 0xF0	; 240
    123a:	89 2b       	or	r24, r25
    123c:	8c 93       	st	X, r24
    123e:	0a c0       	rjmp	.+20     	; 0x1254 <dio_write_highnibble+0xa6>
		break ;
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
    1240:	a2 e3       	ldi	r26, 0x32	; 50
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e2 e3       	ldi	r30, 0x32	; 50
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	98 2f       	mov	r25, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 7f       	andi	r24, 0xF0	; 240
    1250:	89 2b       	or	r24, r25
    1252:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <clear_high_nibble>:

void clear_high_nibble(uint8 portname)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <clear_high_nibble+0x6>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3b 83       	std	Y+3, r19	; 0x03
    1278:	2a 83       	std	Y+2, r18	; 0x02
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	82 34       	cpi	r24, 0x42	; 66
    1280:	91 05       	cpc	r25, r1
    1282:	f1 f0       	breq	.+60     	; 0x12c0 <clear_high_nibble+0x5e>
    1284:	2a 81       	ldd	r18, Y+2	; 0x02
    1286:	3b 81       	ldd	r19, Y+3	; 0x03
    1288:	23 34       	cpi	r18, 0x43	; 67
    128a:	31 05       	cpc	r19, r1
    128c:	34 f4       	brge	.+12     	; 0x129a <clear_high_nibble+0x38>
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	9b 81       	ldd	r25, Y+3	; 0x03
    1292:	81 34       	cpi	r24, 0x41	; 65
    1294:	91 05       	cpc	r25, r1
    1296:	61 f0       	breq	.+24     	; 0x12b0 <clear_high_nibble+0x4e>
    1298:	2a c0       	rjmp	.+84     	; 0x12ee <clear_high_nibble+0x8c>
    129a:	2a 81       	ldd	r18, Y+2	; 0x02
    129c:	3b 81       	ldd	r19, Y+3	; 0x03
    129e:	23 34       	cpi	r18, 0x43	; 67
    12a0:	31 05       	cpc	r19, r1
    12a2:	b1 f0       	breq	.+44     	; 0x12d0 <clear_high_nibble+0x6e>
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	9b 81       	ldd	r25, Y+3	; 0x03
    12a8:	84 34       	cpi	r24, 0x44	; 68
    12aa:	91 05       	cpc	r25, r1
    12ac:	c9 f0       	breq	.+50     	; 0x12e0 <clear_high_nibble+0x7e>
    12ae:	1f c0       	rjmp	.+62     	; 0x12ee <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
    12b0:	ab e3       	ldi	r26, 0x3B	; 59
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	eb e3       	ldi	r30, 0x3B	; 59
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 70       	andi	r24, 0x0F	; 15
    12bc:	8c 93       	st	X, r24
    12be:	17 c0       	rjmp	.+46     	; 0x12ee <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
    12c0:	a8 e3       	ldi	r26, 0x38	; 56
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e8 e3       	ldi	r30, 0x38	; 56
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 70       	andi	r24, 0x0F	; 15
    12cc:	8c 93       	st	X, r24
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
    12d0:	a5 e3       	ldi	r26, 0x35	; 53
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e5 e3       	ldi	r30, 0x35	; 53
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8f 70       	andi	r24, 0x0F	; 15
    12dc:	8c 93       	st	X, r24
    12de:	07 c0       	rjmp	.+14     	; 0x12ee <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
    12e0:	a2 e3       	ldi	r26, 0x32	; 50
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 70       	andi	r24, 0x0F	; 15
    12ec:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_vconnectpullup>:

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_vconnectpullup+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <DIO_vconnectpullup+0x8>
    1302:	0f 92       	push	r0
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6a 83       	std	Y+2, r22	; 0x02
    130c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3d 83       	std	Y+5, r19	; 0x05
    1316:	2c 83       	std	Y+4, r18	; 0x04
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	82 34       	cpi	r24, 0x42	; 66
    131e:	91 05       	cpc	r25, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <DIO_vconnectpullup+0x2a>
    1322:	5e c0       	rjmp	.+188    	; 0x13e0 <DIO_vconnectpullup+0xe6>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	23 34       	cpi	r18, 0x43	; 67
    132a:	31 05       	cpc	r19, r1
    132c:	34 f4       	brge	.+12     	; 0x133a <DIO_vconnectpullup+0x40>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	81 34       	cpi	r24, 0x41	; 65
    1334:	91 05       	cpc	r25, r1
    1336:	71 f0       	breq	.+28     	; 0x1354 <DIO_vconnectpullup+0x5a>
    1338:	24 c1       	rjmp	.+584    	; 0x1582 <DIO_vconnectpullup+0x288>
    133a:	2c 81       	ldd	r18, Y+4	; 0x04
    133c:	3d 81       	ldd	r19, Y+5	; 0x05
    133e:	23 34       	cpi	r18, 0x43	; 67
    1340:	31 05       	cpc	r19, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <DIO_vconnectpullup+0x4c>
    1344:	93 c0       	rjmp	.+294    	; 0x146c <DIO_vconnectpullup+0x172>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	84 34       	cpi	r24, 0x44	; 68
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <DIO_vconnectpullup+0x58>
    1350:	d3 c0       	rjmp	.+422    	; 0x14f8 <DIO_vconnectpullup+0x1fe>
    1352:	17 c1       	rjmp	.+558    	; 0x1582 <DIO_vconnectpullup+0x288>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	71 f5       	brne	.+92     	; 0x13b6 <DIO_vconnectpullup+0xbc>
		{
			CLR_BIT(SFIOR,PUD);
    135a:	a0 e5       	ldi	r26, 0x50	; 80
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e0 e5       	ldi	r30, 0x50	; 80
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8b 7f       	andi	r24, 0xFB	; 251
    1366:	8c 93       	st	X, r24
			CLR_BIT(DDRA,pinnumber);
    1368:	aa e3       	ldi	r26, 0x3A	; 58
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ea e3       	ldi	r30, 0x3A	; 58
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_vconnectpullup+0x8a>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	2a 95       	dec	r18
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_vconnectpullup+0x86>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
			SET_BIT(PORTA,pinnumber);
    138e:	ab e3       	ldi	r26, 0x3B	; 59
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	eb e3       	ldi	r30, 0x3B	; 59
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_vconnectpullup+0xb2>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_vconnectpullup+0xae>
    13b0:	84 2b       	or	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	e6 c0       	rjmp	.+460    	; 0x1582 <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    13b6:	ab e3       	ldi	r26, 0x3B	; 59
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	eb e3       	ldi	r30, 0x3B	; 59
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_vconnectpullup+0xda>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_vconnectpullup+0xd6>
    13d8:	80 95       	com	r24
    13da:	84 23       	and	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	d1 c0       	rjmp	.+418    	; 0x1582 <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	71 f5       	brne	.+92     	; 0x1442 <DIO_vconnectpullup+0x148>
		{
			CLR_BIT(SFIOR,PUD);
    13e6:	a0 e5       	ldi	r26, 0x50	; 80
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e0 e5       	ldi	r30, 0x50	; 80
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	8c 93       	st	X, r24
			CLR_BIT(DDRB,pinnumber);
    13f4:	a7 e3       	ldi	r26, 0x37	; 55
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e7 e3       	ldi	r30, 0x37	; 55
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_vconnectpullup+0x116>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	2a 95       	dec	r18
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_vconnectpullup+0x112>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
			SET_BIT(PORTB,pinnumber);
    141a:	a8 e3       	ldi	r26, 0x38	; 56
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e8 e3       	ldi	r30, 0x38	; 56
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_vconnectpullup+0x13e>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_vconnectpullup+0x13a>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	a0 c0       	rjmp	.+320    	; 0x1582 <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    1442:	a8 e3       	ldi	r26, 0x38	; 56
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e8 e3       	ldi	r30, 0x38	; 56
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_vconnectpullup+0x166>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_vconnectpullup+0x162>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	8b c0       	rjmp	.+278    	; 0x1582 <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	71 f5       	brne	.+92     	; 0x14ce <DIO_vconnectpullup+0x1d4>
		{
			CLR_BIT(SFIOR,PUD);
    1472:	a0 e5       	ldi	r26, 0x50	; 80
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e0 e5       	ldi	r30, 0x50	; 80
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8b 7f       	andi	r24, 0xFB	; 251
    147e:	8c 93       	st	X, r24
			CLR_BIT(DDRC,pinnumber);
    1480:	a4 e3       	ldi	r26, 0x34	; 52
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e4 e3       	ldi	r30, 0x34	; 52
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_vconnectpullup+0x1a2>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_vconnectpullup+0x19e>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
			SET_BIT(PORTC,pinnumber);
    14a6:	a5 e3       	ldi	r26, 0x35	; 53
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e5 e3       	ldi	r30, 0x35	; 53
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_vconnectpullup+0x1ca>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_vconnectpullup+0x1c6>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	5a c0       	rjmp	.+180    	; 0x1582 <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    14ce:	a5 e3       	ldi	r26, 0x35	; 53
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_vconnectpullup+0x1f2>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_vconnectpullup+0x1ee>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	45 c0       	rjmp	.+138    	; 0x1582 <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	71 f5       	brne	.+92     	; 0x155a <DIO_vconnectpullup+0x260>
		{
			CLR_BIT(SFIOR,PUD);
    14fe:	a0 e5       	ldi	r26, 0x50	; 80
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e0 e5       	ldi	r30, 0x50	; 80
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8b 7f       	andi	r24, 0xFB	; 251
    150a:	8c 93       	st	X, r24
			CLR_BIT(DDRD,pinnumber);
    150c:	a1 e3       	ldi	r26, 0x31	; 49
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e1 e3       	ldi	r30, 0x31	; 49
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_vconnectpullup+0x22e>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	2a 95       	dec	r18
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_vconnectpullup+0x22a>
    152c:	80 95       	com	r24
    152e:	84 23       	and	r24, r20
    1530:	8c 93       	st	X, r24
			SET_BIT(PORTD,pinnumber);
    1532:	a2 e3       	ldi	r26, 0x32	; 50
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_vconnectpullup+0x256>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_vconnectpullup+0x252>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    155a:	a2 e3       	ldi	r26, 0x32	; 50
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e2 e3       	ldi	r30, 0x32	; 50
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_vconnectpullup+0x27e>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_vconnectpullup+0x27a>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <Global_Interrupt_Enable>:
#include "BIT_MATH.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    159a:	af e5       	ldi	r26, 0x5F	; 95
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ef e5       	ldi	r30, 0x5F	; 95
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 68       	ori	r24, 0x80	; 128
    15a6:	8c 93       	st	X, r24
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    15b6:	af e5       	ldi	r26, 0x5F	; 95
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ef e5       	ldi	r30, 0x5F	; 95
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 77       	andi	r24, 0x7F	; 127
    15c2:	8c 93       	st	X, r24
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	c6 54       	subi	r28, 0x46	; 70
    15d8:	d0 40       	sbci	r29, 0x00	; 0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	fe 01       	movw	r30, r28
    15e6:	ed 5b       	subi	r30, 0xBD	; 189
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a8 e4       	ldi	r26, 0x48	; 72
    15f0:	b3 e4       	ldi	r27, 0x43	; 67
    15f2:	80 83       	st	Z, r24
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	a2 83       	std	Z+2, r26	; 0x02
    15f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	8e 01       	movw	r16, r28
    15fc:	01 5c       	subi	r16, 0xC1	; 193
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	fe 01       	movw	r30, r28
    1602:	ed 5b       	subi	r30, 0xBD	; 189
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a ef       	ldi	r20, 0xFA	; 250
    1614:	54 e4       	ldi	r21, 0x44	; 68
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1628:	fe 01       	movw	r30, r28
    162a:	ff 96       	adiw	r30, 0x3f	; 63
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e8       	ldi	r20, 0x80	; 128
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1640:	88 23       	and	r24, r24
    1642:	2c f4       	brge	.+10     	; 0x164e <LCD_vInit+0x84>
		__ticks = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9e af       	std	Y+62, r25	; 0x3e
    164a:	8d af       	std	Y+61, r24	; 0x3d
    164c:	46 c0       	rjmp	.+140    	; 0x16da <LCD_vInit+0x110>
	else if (__tmp > 65535)
    164e:	fe 01       	movw	r30, r28
    1650:	ff 96       	adiw	r30, 0x3f	; 63
    1652:	60 81       	ld	r22, Z
    1654:	71 81       	ldd	r23, Z+1	; 0x01
    1656:	82 81       	ldd	r24, Z+2	; 0x02
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	64 f5       	brge	.+88     	; 0x16c2 <LCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	fe 01       	movw	r30, r28
    166c:	ed 5b       	subi	r30, 0xBD	; 189
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e af       	std	Y+62, r25	; 0x3e
    1696:	8d af       	std	Y+61, r24	; 0x3d
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <LCD_vInit+0xee>
    169a:	88 ec       	ldi	r24, 0xC8	; 200
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9c af       	std	Y+60, r25	; 0x3c
    16a0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    16a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_vInit+0xdc>
    16aa:	9c af       	std	Y+60, r25	; 0x3c
    16ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    16b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	9e af       	std	Y+62, r25	; 0x3e
    16b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <LCD_vInit+0xd0>
    16c0:	16 c0       	rjmp	.+44     	; 0x16ee <LCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	fe 01       	movw	r30, r28
    16c4:	ff 96       	adiw	r30, 0x3f	; 63
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	93 81       	ldd	r25, Z+3	; 0x03
    16ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9e af       	std	Y+62, r25	; 0x3e
    16d8:	8d af       	std	Y+61, r24	; 0x3d
    16da:	8d ad       	ldd	r24, Y+61	; 0x3d
    16dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    16de:	9a af       	std	Y+58, r25	; 0x3a
    16e0:	89 af       	std	Y+57, r24	; 0x39
    16e2:	89 ad       	ldd	r24, Y+57	; 0x39
    16e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCD_vInit+0x11c>
    16ea:	9a af       	std	Y+58, r25	; 0x3a
    16ec:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
    16ee:	81 e4       	ldi	r24, 0x41	; 65
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
    16f8:	81 e4       	ldi	r24, 0x41	; 65
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
    1702:	81 e4       	ldi	r24, 0x41	; 65
    1704:	62 e0       	ldi	r22, 0x02	; 2
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
    170c:	81 e4       	ldi	r24, 0x41	; 65
    170e:	63 e0       	ldi	r22, 0x03	; 3
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
    1716:	81 e4       	ldi	r24, 0x41	; 65
    1718:	64 e0       	ldi	r22, 0x04	; 4
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    1720:	81 e4       	ldi	r24, 0x41	; 65
    1722:	65 e0       	ldi	r22, 0x05	; 5
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    172a:	81 e4       	ldi	r24, 0x41	; 65
    172c:	66 e0       	ldi	r22, 0x06	; 6
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    1734:	81 e4       	ldi	r24, 0x41	; 65
    1736:	67 e0       	ldi	r22, 0x07	; 7
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
    173e:	82 e4       	ldi	r24, 0x42	; 66
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
    1748:	82 e4       	ldi	r24, 0x42	; 66
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
    1752:	82 e4       	ldi	r24, 0x42	; 66
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
    175c:	82 e4       	ldi	r24, 0x42	; 66
    175e:	62 e0       	ldi	r22, 0x02	; 2
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
    1766:	88 e3       	ldi	r24, 0x38	; 56
    1768:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_vSend_cmd>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e8       	ldi	r26, 0x80	; 128
    1772:	bf e3       	ldi	r27, 0x3F	; 63
    1774:	8d ab       	std	Y+53, r24	; 0x35
    1776:	9e ab       	std	Y+54, r25	; 0x36
    1778:	af ab       	std	Y+55, r26	; 0x37
    177a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6d a9       	ldd	r22, Y+53	; 0x35
    177e:	7e a9       	ldd	r23, Y+54	; 0x36
    1780:	8f a9       	ldd	r24, Y+55	; 0x37
    1782:	98 ad       	ldd	r25, Y+56	; 0x38
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	89 ab       	std	Y+49, r24	; 0x31
    1796:	9a ab       	std	Y+50, r25	; 0x32
    1798:	ab ab       	std	Y+51, r26	; 0x33
    179a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    179c:	69 a9       	ldd	r22, Y+49	; 0x31
    179e:	7a a9       	ldd	r23, Y+50	; 0x32
    17a0:	8b a9       	ldd	r24, Y+51	; 0x33
    17a2:	9c a9       	ldd	r25, Y+52	; 0x34
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <LCD_vInit+0x1f4>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <LCD_vInit+0x272>
	else if (__tmp > 65535)
    17be:	69 a9       	ldd	r22, Y+49	; 0x31
    17c0:	7a a9       	ldd	r23, Y+50	; 0x32
    17c2:	8b a9       	ldd	r24, Y+51	; 0x33
    17c4:	9c a9       	ldd	r25, Y+52	; 0x34
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <LCD_vInit+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6d a9       	ldd	r22, Y+53	; 0x35
    17d8:	7e a9       	ldd	r23, Y+54	; 0x36
    17da:	8f a9       	ldd	r24, Y+55	; 0x37
    17dc:	98 ad       	ldd	r25, Y+56	; 0x38
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	98 ab       	std	Y+48, r25	; 0x30
    17fc:	8f a7       	std	Y+47, r24	; 0x2f
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <LCD_vInit+0x254>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e a7       	std	Y+46, r25	; 0x2e
    1806:	8d a7       	std	Y+45, r24	; 0x2d
    1808:	8d a5       	ldd	r24, Y+45	; 0x2d
    180a:	9e a5       	ldd	r25, Y+46	; 0x2e
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_vInit+0x242>
    1810:	9e a7       	std	Y+46, r25	; 0x2e
    1812:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8f a5       	ldd	r24, Y+47	; 0x2f
    1816:	98 a9       	ldd	r25, Y+48	; 0x30
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	98 ab       	std	Y+48, r25	; 0x30
    181c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1820:	98 a9       	ldd	r25, Y+48	; 0x30
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <LCD_vInit+0x236>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <LCD_vInit+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	69 a9       	ldd	r22, Y+49	; 0x31
    182a:	7a a9       	ldd	r23, Y+50	; 0x32
    182c:	8b a9       	ldd	r24, Y+51	; 0x33
    182e:	9c a9       	ldd	r25, Y+52	; 0x34
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	98 ab       	std	Y+48, r25	; 0x30
    183a:	8f a7       	std	Y+47, r24	; 0x2f
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	9c a7       	std	Y+44, r25	; 0x2c
    1842:	8b a7       	std	Y+43, r24	; 0x2b
    1844:	8b a5       	ldd	r24, Y+43	; 0x2b
    1846:	9c a5       	ldd	r25, Y+44	; 0x2c
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_vInit+0x27e>
    184c:	9c a7       	std	Y+44, r25	; 0x2c
    184e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    1850:	8e e0       	ldi	r24, 0x0E	; 14
    1852:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_vSend_cmd>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 e8       	ldi	r26, 0x80	; 128
    185c:	bf e3       	ldi	r27, 0x3F	; 63
    185e:	8f a3       	std	Y+39, r24	; 0x27
    1860:	98 a7       	std	Y+40, r25	; 0x28
    1862:	a9 a7       	std	Y+41, r26	; 0x29
    1864:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1866:	6f a1       	ldd	r22, Y+39	; 0x27
    1868:	78 a5       	ldd	r23, Y+40	; 0x28
    186a:	89 a5       	ldd	r24, Y+41	; 0x29
    186c:	9a a5       	ldd	r25, Y+42	; 0x2a
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4a ef       	ldi	r20, 0xFA	; 250
    1874:	54 e4       	ldi	r21, 0x44	; 68
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8b a3       	std	Y+35, r24	; 0x23
    1880:	9c a3       	std	Y+36, r25	; 0x24
    1882:	ad a3       	std	Y+37, r26	; 0x25
    1884:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1886:	6b a1       	ldd	r22, Y+35	; 0x23
    1888:	7c a1       	ldd	r23, Y+36	; 0x24
    188a:	8d a1       	ldd	r24, Y+37	; 0x25
    188c:	9e a1       	ldd	r25, Y+38	; 0x26
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	2c f4       	brge	.+10     	; 0x18a8 <LCD_vInit+0x2de>
		__ticks = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9a a3       	std	Y+34, r25	; 0x22
    18a4:	89 a3       	std	Y+33, r24	; 0x21
    18a6:	3f c0       	rjmp	.+126    	; 0x1926 <LCD_vInit+0x35c>
	else if (__tmp > 65535)
    18a8:	6b a1       	ldd	r22, Y+35	; 0x23
    18aa:	7c a1       	ldd	r23, Y+36	; 0x24
    18ac:	8d a1       	ldd	r24, Y+37	; 0x25
    18ae:	9e a1       	ldd	r25, Y+38	; 0x26
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	4f e7       	ldi	r20, 0x7F	; 127
    18b6:	57 e4       	ldi	r21, 0x47	; 71
    18b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18bc:	18 16       	cp	r1, r24
    18be:	4c f5       	brge	.+82     	; 0x1912 <LCD_vInit+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c0:	6f a1       	ldd	r22, Y+39	; 0x27
    18c2:	78 a5       	ldd	r23, Y+40	; 0x28
    18c4:	89 a5       	ldd	r24, Y+41	; 0x29
    18c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e2       	ldi	r20, 0x20	; 32
    18ce:	51 e4       	ldi	r21, 0x41	; 65
    18d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9a a3       	std	Y+34, r25	; 0x22
    18e6:	89 a3       	std	Y+33, r24	; 0x21
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <LCD_vInit+0x33e>
    18ea:	88 ec       	ldi	r24, 0xC8	; 200
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	98 a3       	std	Y+32, r25	; 0x20
    18f0:	8f 8f       	std	Y+31, r24	; 0x1f
    18f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f4:	98 a1       	ldd	r25, Y+32	; 0x20
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_vInit+0x32c>
    18fa:	98 a3       	std	Y+32, r25	; 0x20
    18fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1900:	9a a1       	ldd	r25, Y+34	; 0x22
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	9a a3       	std	Y+34, r25	; 0x22
    1906:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	89 a1       	ldd	r24, Y+33	; 0x21
    190a:	9a a1       	ldd	r25, Y+34	; 0x22
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	69 f7       	brne	.-38     	; 0x18ea <LCD_vInit+0x320>
    1910:	14 c0       	rjmp	.+40     	; 0x193a <LCD_vInit+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1912:	6b a1       	ldd	r22, Y+35	; 0x23
    1914:	7c a1       	ldd	r23, Y+36	; 0x24
    1916:	8d a1       	ldd	r24, Y+37	; 0x25
    1918:	9e a1       	ldd	r25, Y+38	; 0x26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9a a3       	std	Y+34, r25	; 0x22
    1924:	89 a3       	std	Y+33, r24	; 0x21
    1926:	89 a1       	ldd	r24, Y+33	; 0x21
    1928:	9a a1       	ldd	r25, Y+34	; 0x22
    192a:	9e 8f       	std	Y+30, r25	; 0x1e
    192c:	8d 8f       	std	Y+29, r24	; 0x1d
    192e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_vInit+0x368>
    1936:	9e 8f       	std	Y+30, r25	; 0x1e
    1938:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_vSend_cmd>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e2       	ldi	r26, 0x20	; 32
    1946:	b1 e4       	ldi	r27, 0x41	; 65
    1948:	89 8f       	std	Y+25, r24	; 0x19
    194a:	9a 8f       	std	Y+26, r25	; 0x1a
    194c:	ab 8f       	std	Y+27, r26	; 0x1b
    194e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	69 8d       	ldd	r22, Y+25	; 0x19
    1952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a ef       	ldi	r20, 0xFA	; 250
    195e:	54 e4       	ldi	r21, 0x44	; 68
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8d 8b       	std	Y+21, r24	; 0x15
    196a:	9e 8b       	std	Y+22, r25	; 0x16
    196c:	af 8b       	std	Y+23, r26	; 0x17
    196e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1970:	6d 89       	ldd	r22, Y+21	; 0x15
    1972:	7e 89       	ldd	r23, Y+22	; 0x16
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	98 8d       	ldd	r25, Y+24	; 0x18
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_vInit+0x3c8>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_vInit+0x446>
	else if (__tmp > 65535)
    1992:	6d 89       	ldd	r22, Y+21	; 0x15
    1994:	7e 89       	ldd	r23, Y+22	; 0x16
    1996:	8f 89       	ldd	r24, Y+23	; 0x17
    1998:	98 8d       	ldd	r25, Y+24	; 0x18
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_vInit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	69 8d       	ldd	r22, Y+25	; 0x19
    19ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_vInit+0x428>
    19d4:	88 ec       	ldi	r24, 0xC8	; 200
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9a 8b       	std	Y+18, r25	; 0x12
    19da:	89 8b       	std	Y+17, r24	; 0x11
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	9a 89       	ldd	r25, Y+18	; 0x12
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_vInit+0x416>
    19e4:	9a 8b       	std	Y+18, r25	; 0x12
    19e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ea:	9c 89       	ldd	r25, Y+20	; 0x14
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_vInit+0x40a>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <LCD_vInit+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6d 89       	ldd	r22, Y+21	; 0x15
    19fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1a00:	8f 89       	ldd	r24, Y+23	; 0x17
    1a02:	98 8d       	ldd	r25, Y+24	; 0x18
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	98 8b       	std	Y+16, r25	; 0x10
    1a16:	8f 87       	std	Y+15, r24	; 0x0f
    1a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1a:	98 89       	ldd	r25, Y+16	; 0x10
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_vInit+0x452>
    1a20:	98 8b       	std	Y+16, r25	; 0x10
    1a22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    1a24:	86 e0       	ldi	r24, 0x06	; 6
    1a26:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_vSend_cmd>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 e8       	ldi	r26, 0x80	; 128
    1a30:	bf e3       	ldi	r27, 0x3F	; 63
    1a32:	8b 87       	std	Y+11, r24	; 0x0b
    1a34:	9c 87       	std	Y+12, r25	; 0x0c
    1a36:	ad 87       	std	Y+13, r26	; 0x0d
    1a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8f 83       	std	Y+7, r24	; 0x07
    1a54:	98 87       	std	Y+8, r25	; 0x08
    1a56:	a9 87       	std	Y+9, r26	; 0x09
    1a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <LCD_vInit+0x4b2>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <LCD_vInit+0x530>
	else if (__tmp > 65535)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <LCD_vInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <LCD_vInit+0x512>
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_vInit+0x500>
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <LCD_vInit+0x4f4>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <LCD_vInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae8:	78 85       	ldd	r23, Y+8	; 0x08
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_vInit+0x53c>
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
    1b0e:	ca 5b       	subi	r28, 0xBA	; 186
    1b10:	df 4f       	sbci	r29, 0xFF	; 255
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <send_falling_edge>:


static void send_falling_edge(void)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	6c 97       	sbiw	r28, 0x1c	; 28
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    1b3a:	82 e4       	ldi	r24, 0x42	; 66
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e0       	ldi	r26, 0x00	; 0
    1b4a:	b0 e4       	ldi	r27, 0x40	; 64
    1b4c:	89 8f       	std	Y+25, r24	; 0x19
    1b4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b50:	ab 8f       	std	Y+27, r26	; 0x1b
    1b52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	69 8d       	ldd	r22, Y+25	; 0x19
    1b56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a ef       	ldi	r20, 0xFA	; 250
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8d 8b       	std	Y+21, r24	; 0x15
    1b6e:	9e 8b       	std	Y+22, r25	; 0x16
    1b70:	af 8b       	std	Y+23, r26	; 0x17
    1b72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b74:	6d 89       	ldd	r22, Y+21	; 0x15
    1b76:	7e 89       	ldd	r23, Y+22	; 0x16
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <send_falling_edge+0x70>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1b96:	6d 89       	ldd	r22, Y+21	; 0x15
    1b98:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9c 8b       	std	Y+20, r25	; 0x14
    1bd4:	8b 8b       	std	Y+19, r24	; 0x13
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <send_falling_edge+0xd0>
    1bd8:	88 ec       	ldi	r24, 0xC8	; 200
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9a 8b       	std	Y+18, r25	; 0x12
    1bde:	89 8b       	std	Y+17, r24	; 0x11
    1be0:	89 89       	ldd	r24, Y+17	; 0x11
    1be2:	9a 89       	ldd	r25, Y+18	; 0x12
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <send_falling_edge+0xbe>
    1be8:	9a 8b       	std	Y+18, r25	; 0x12
    1bea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8b 89       	ldd	r24, Y+19	; 0x13
    1bee:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <send_falling_edge+0xb2>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9c 8b       	std	Y+20, r25	; 0x14
    1c12:	8b 8b       	std	Y+19, r24	; 0x13
    1c14:	8b 89       	ldd	r24, Y+19	; 0x13
    1c16:	9c 89       	ldd	r25, Y+20	; 0x14
    1c18:	98 8b       	std	Y+16, r25	; 0x10
    1c1a:	8f 87       	std	Y+15, r24	; 0x0f
    1c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1e:	98 89       	ldd	r25, Y+16	; 0x10
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <send_falling_edge+0xfa>
    1c24:	98 8b       	std	Y+16, r25	; 0x10
    1c26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('B',EN,0);
    1c28:	82 e4       	ldi	r24, 0x42	; 66
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e4       	ldi	r27, 0x40	; 64
    1c3a:	8b 87       	std	Y+11, r24	; 0x0b
    1c3c:	9c 87       	std	Y+12, r25	; 0x0c
    1c3e:	ad 87       	std	Y+13, r26	; 0x0d
    1c40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a ef       	ldi	r20, 0xFA	; 250
    1c50:	54 e4       	ldi	r21, 0x44	; 68
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8f 83       	std	Y+7, r24	; 0x07
    1c5c:	98 87       	std	Y+8, r25	; 0x08
    1c5e:	a9 87       	std	Y+9, r26	; 0x09
    1c60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <send_falling_edge+0x15e>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	3f c0       	rjmp	.+126    	; 0x1d02 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	57 e4       	ldi	r21, 0x47	; 71
    1c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	4c f5       	brge	.+82     	; 0x1cee <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <send_falling_edge+0x1be>
    1cc6:	88 ec       	ldi	r24, 0xC8	; 200
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <send_falling_edge+0x1ac>
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <send_falling_edge+0x1a0>
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <send_falling_edge+0x1e8>
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d16:	6c 96       	adiw	r28, 0x1c	; 28
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	2f 97       	sbiw	r28, 0x0f	; 15
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
    1d3e:	81 e4       	ldi	r24, 0x41	; 65
    1d40:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d42:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_write_port>
	DIO_write('B',RS,0);
    1d46:	82 e4       	ldi	r24, 0x42	; 66
    1d48:	61 e0       	ldi	r22, 0x01	; 1
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    1d50:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <send_falling_edge>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e8       	ldi	r26, 0x80	; 128
    1d5a:	bf e3       	ldi	r27, 0x3F	; 63
    1d5c:	8b 87       	std	Y+11, r24	; 0x0b
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	ad 87       	std	Y+13, r26	; 0x0d
    1d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8f 83       	std	Y+7, r24	; 0x07
    1d7e:	98 87       	std	Y+8, r25	; 0x08
    1d80:	a9 87       	std	Y+9, r26	; 0x09
    1d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_vSend_cmd+0x7e>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_vSend_cmd+0xfc>
	else if (__tmp > 65535)
    1da6:	6f 81       	ldd	r22, Y+7	; 0x07
    1da8:	78 85       	ldd	r23, Y+8	; 0x08
    1daa:	89 85       	ldd	r24, Y+9	; 0x09
    1dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_vSend_cmd+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_vSend_cmd+0xde>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_vSend_cmd+0xcc>
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_vSend_cmd+0xc0>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_vSend_cmd+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_vSend_cmd+0x108>
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    1e38:	2f 96       	adiw	r28, 0x0f	; 15
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	2f 97       	sbiw	r28, 0x0f	; 15
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',data);
    1e60:	81 e4       	ldi	r24, 0x41	; 65
    1e62:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e64:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_write_port>
	DIO_write('B',RS,1);
    1e68:	82 e4       	ldi	r24, 0x42	; 66
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    1e72:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <send_falling_edge>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e8       	ldi	r26, 0x80	; 128
    1e7c:	bf e3       	ldi	r27, 0x3F	; 63
    1e7e:	8b 87       	std	Y+11, r24	; 0x0b
    1e80:	9c 87       	std	Y+12, r25	; 0x0c
    1e82:	ad 87       	std	Y+13, r26	; 0x0d
    1e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a ef       	ldi	r20, 0xFA	; 250
    1e94:	54 e4       	ldi	r21, 0x44	; 68
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	8f 83       	std	Y+7, r24	; 0x07
    1ea0:	98 87       	std	Y+8, r25	; 0x08
    1ea2:	a9 87       	std	Y+9, r26	; 0x09
    1ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	78 85       	ldd	r23, Y+8	; 0x08
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <LCD_vSend_char+0x7e>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	3f c0       	rjmp	.+126    	; 0x1f46 <LCD_vSend_char+0xfc>
	else if (__tmp > 65535)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	4f e7       	ldi	r20, 0x7F	; 127
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	4c f5       	brge	.+82     	; 0x1f32 <LCD_vSend_char+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <LCD_vSend_char+0xde>
    1f0a:	88 ec       	ldi	r24, 0xC8	; 200
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_vSend_char+0xcc>
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <LCD_vSend_char+0xc0>
    1f30:	14 c0       	rjmp	.+40     	; 0x1f5a <LCD_vSend_char+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_vSend_char+0x108>
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    1f5a:	2f 96       	adiw	r28, 0x0f	; 15
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <LCD_vSend_string+0x6>
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	0a c0       	rjmp	.+20     	; 0x1f90 <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    1f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f80:	80 81       	ld	r24, Z
    1f82:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <LCD_vSend_char>
		data++;
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    1f90:	e9 81       	ldd	r30, Y+1	; 0x01
    1f92:	fa 81       	ldd	r31, Y+2	; 0x02
    1f94:	80 81       	ld	r24, Z
    1f96:	88 23       	and	r24, r24
    1f98:	89 f7       	brne	.-30     	; 0x1f7c <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <LCD_clearscreen>:
void LCD_clearscreen()
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	2e 97       	sbiw	r28, 0x0e	; 14
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_vSend_cmd>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a0 e2       	ldi	r26, 0x20	; 32
    1fc4:	b1 e4       	ldi	r27, 0x41	; 65
    1fc6:	8b 87       	std	Y+11, r24	; 0x0b
    1fc8:	9c 87       	std	Y+12, r25	; 0x0c
    1fca:	ad 87       	std	Y+13, r26	; 0x0d
    1fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a ef       	ldi	r20, 0xFA	; 250
    1fdc:	54 e4       	ldi	r21, 0x44	; 68
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8f 83       	std	Y+7, r24	; 0x07
    1fe8:	98 87       	std	Y+8, r25	; 0x08
    1fea:	a9 87       	std	Y+9, r26	; 0x09
    1fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <LCD_clearscreen+0x6c>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	3f c0       	rjmp	.+126    	; 0x208e <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	3f ef       	ldi	r19, 0xFF	; 255
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	57 e4       	ldi	r21, 0x47	; 71
    2020:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	4c f5       	brge	.+82     	; 0x207a <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <LCD_clearscreen+0xcc>
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9c 83       	std	Y+4, r25	; 0x04
    2058:	8b 83       	std	Y+3, r24	; 0x03
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_clearscreen+0xba>
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	69 f7       	brne	.-38     	; 0x2052 <LCD_clearscreen+0xae>
    2078:	14 c0       	rjmp	.+40     	; 0x20a2 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_clearscreen+0xf6>
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    20a2:	2e 96       	adiw	r28, 0x0e	; 14
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	61 97       	sbiw	r28, 0x11	; 17
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	88 8b       	std	Y+16, r24	; 0x10
    20ca:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    20cc:	88 89       	ldd	r24, Y+16	; 0x10
    20ce:	83 30       	cpi	r24, 0x03	; 3
    20d0:	48 f4       	brcc	.+18     	; 0x20e4 <LCD_movecursor+0x30>
    20d2:	88 89       	ldd	r24, Y+16	; 0x10
    20d4:	88 23       	and	r24, r24
    20d6:	31 f0       	breq	.+12     	; 0x20e4 <LCD_movecursor+0x30>
    20d8:	89 89       	ldd	r24, Y+17	; 0x11
    20da:	81 31       	cpi	r24, 0x11	; 17
    20dc:	18 f4       	brcc	.+6      	; 0x20e4 <LCD_movecursor+0x30>
    20de:	89 89       	ldd	r24, Y+17	; 0x11
    20e0:	88 23       	and	r24, r24
    20e2:	19 f4       	brne	.+6      	; 0x20ea <LCD_movecursor+0x36>
	{
		data=0x80;
    20e4:	80 e8       	ldi	r24, 0x80	; 128
    20e6:	8f 87       	std	Y+15, r24	; 0x0f
    20e8:	0d c0       	rjmp	.+26     	; 0x2104 <LCD_movecursor+0x50>
	}
	else if(row==1)
    20ea:	88 89       	ldd	r24, Y+16	; 0x10
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    20f0:	89 89       	ldd	r24, Y+17	; 0x11
    20f2:	81 58       	subi	r24, 0x81	; 129
    20f4:	8f 87       	std	Y+15, r24	; 0x0f
    20f6:	06 c0       	rjmp	.+12     	; 0x2104 <LCD_movecursor+0x50>
	}
	else if (row==2)
    20f8:	88 89       	ldd	r24, Y+16	; 0x10
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	19 f4       	brne	.+6      	; 0x2104 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    20fe:	89 89       	ldd	r24, Y+17	; 0x11
    2100:	81 54       	subi	r24, 0x41	; 65
    2102:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    2104:	8f 85       	ldd	r24, Y+15	; 0x0f
    2106:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_vSend_cmd>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 e8       	ldi	r26, 0x80	; 128
    2110:	bf e3       	ldi	r27, 0x3F	; 63
    2112:	8b 87       	std	Y+11, r24	; 0x0b
    2114:	9c 87       	std	Y+12, r25	; 0x0c
    2116:	ad 87       	std	Y+13, r26	; 0x0d
    2118:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	6b 85       	ldd	r22, Y+11	; 0x0b
    211c:	7c 85       	ldd	r23, Y+12	; 0x0c
    211e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2120:	9e 85       	ldd	r25, Y+14	; 0x0e
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a ef       	ldi	r20, 0xFA	; 250
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8f 83       	std	Y+7, r24	; 0x07
    2134:	98 87       	std	Y+8, r25	; 0x08
    2136:	a9 87       	std	Y+9, r26	; 0x09
    2138:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    213a:	6f 81       	ldd	r22, Y+7	; 0x07
    213c:	78 85       	ldd	r23, Y+8	; 0x08
    213e:	89 85       	ldd	r24, Y+9	; 0x09
    2140:	9a 85       	ldd	r25, Y+10	; 0x0a
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <LCD_movecursor+0xa8>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	3f c0       	rjmp	.+126    	; 0x21da <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	6b 85       	ldd	r22, Y+11	; 0x0b
    2176:	7c 85       	ldd	r23, Y+12	; 0x0c
    2178:	8d 85       	ldd	r24, Y+13	; 0x0d
    217a:	9e 85       	ldd	r25, Y+14	; 0x0e
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <LCD_movecursor+0x108>
    219e:	88 ec       	ldi	r24, 0xC8	; 200
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <LCD_movecursor+0xf6>
    21ae:	9c 83       	std	Y+4, r25	; 0x04
    21b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f7       	brne	.-38     	; 0x219e <LCD_movecursor+0xea>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_movecursor+0x132>
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    21ee:	61 96       	adiw	r28, 0x11	; 17
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <SPI_vInitMaster>:
#include "SPI.h"
#include "std_macros.h"
#include "NEW__TYPES.h"

void SPI_vInitMaster (void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    2208:	a7 e3       	ldi	r26, 0x37	; 55
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e7 e3       	ldi	r30, 0x37	; 55
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 6b       	ori	r24, 0xB0	; 176
    2214:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    2216:	ad e2       	ldi	r26, 0x2D	; 45
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	ed e2       	ldi	r30, 0x2D	; 45
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	81 65       	ori	r24, 0x51	; 81
    2222:	8c 93       	st	X, r24
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    2232:	a7 e3       	ldi	r26, 0x37	; 55
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e7 e3       	ldi	r30, 0x37	; 55
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	80 64       	ori	r24, 0x40	; 64
    223e:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
    2240:	ad e2       	ldi	r26, 0x2D	; 45
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ed e2       	ldi	r30, 0x2D	; 45
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 64       	ori	r24, 0x40	; 64
    224c:	8c 93       	st	X, r24
}
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <SPI_ui8TransmitRecive>:

u8 SPI_ui8TransmitRecive (u8 data)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	0f 92       	push	r0
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
    2260:	ef e2       	ldi	r30, 0x2F	; 47
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	80 83       	st	Z, r24
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    2268:	ee e2       	ldi	r30, 0x2E	; 46
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	88 1f       	adc	r24, r24
    2270:	88 27       	eor	r24, r24
    2272:	88 1f       	adc	r24, r24
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	90 70       	andi	r25, 0x00	; 0
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	a9 f3       	breq	.-22     	; 0x2268 <SPI_ui8TransmitRecive+0x14>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    227e:	ef e2       	ldi	r30, 0x2F	; 47
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
}
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
    2294:	af e4       	ldi	r26, 0x4F	; 79
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	ef e4       	ldi	r30, 0x4F	; 79
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	8e 7f       	andi	r24, 0xFE	; 254
    22a0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
    22a2:	af e4       	ldi	r26, 0x4F	; 79
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	ef e4       	ldi	r30, 0x4F	; 79
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    22b0:	ae e4       	ldi	r26, 0x4E	; 78
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	ee e4       	ldi	r30, 0x4E	; 78
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 60       	ori	r24, 0x08	; 8
    22bc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    22be:	ae e4       	ldi	r26, 0x4E	; 78
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	ee e4       	ldi	r30, 0x4E	; 78
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	80 61       	ori	r24, 0x10	; 16
    22ca:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
    22cc:	af e4       	ldi	r26, 0x4F	; 79
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	ef e4       	ldi	r30, 0x4F	; 79
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	8f 7b       	andi	r24, 0xBF	; 191
    22d8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
    22da:	af e4       	ldi	r26, 0x4F	; 79
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ef e4       	ldi	r30, 0x4F	; 79
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	80 68       	ori	r24, 0x80	; 128
    22e6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
    22e8:	af e4       	ldi	r26, 0x4F	; 79
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	ef e4       	ldi	r30, 0x4F	; 79
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	8f 7e       	andi	r24, 0xEF	; 239
    22f4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
    22f6:	af e4       	ldi	r26, 0x4F	; 79
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	ef e4       	ldi	r30, 0x4F	; 79
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	80 62       	ori	r24, 0x20	; 32
    2302:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
    2304:	ae e4       	ldi	r26, 0x4E	; 78
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	ee e4       	ldi	r30, 0x4E	; 78
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	88 7f       	andi	r24, 0xF8	; 248
    2310:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
    2312:	a9 e5       	ldi	r26, 0x59	; 89
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e9 e5       	ldi	r30, 0x59	; 89
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	8b 7f       	andi	r24, 0xFB	; 251
    231e:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    2320:	a9 e5       	ldi	r26, 0x59	; 89
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e9 e5       	ldi	r30, 0x59	; 89
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	87 7f       	andi	r24, 0xF7	; 247
    232c:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    232e:	a9 e5       	ldi	r26, 0x59	; 89
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e9 e5       	ldi	r30, 0x59	; 89
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	8f 7e       	andi	r24, 0xEF	; 239
    233a:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    233c:	a9 e5       	ldi	r26, 0x59	; 89
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e9 e5       	ldi	r30, 0x59	; 89
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	8f 7d       	andi	r24, 0xDF	; 223
    2348:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    234a:	a8 e5       	ldi	r26, 0x58	; 88
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e8 e5       	ldi	r30, 0x58	; 88
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	84 60       	ori	r24, 0x04	; 4
    2356:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    2358:	a8 e5       	ldi	r26, 0x58	; 88
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e8 e5       	ldi	r30, 0x58	; 88
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	88 60       	ori	r24, 0x08	; 8
    2364:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    2366:	a8 e5       	ldi	r26, 0x58	; 88
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e8 e5       	ldi	r30, 0x58	; 88
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	80 61       	ori	r24, 0x10	; 16
    2372:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    2374:	a8 e5       	ldi	r26, 0x58	; 88
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e8 e5       	ldi	r30, 0x58	; 88
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	80 62       	ori	r24, 0x20	; 32
    2380:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    2382:	ea e4       	ldi	r30, 0x4A	; 74
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    2388:	eb e4       	ldi	r30, 0x4B	; 75
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    238e:	e8 e4       	ldi	r30, 0x48	; 72
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    2394:	e9 e4       	ldi	r30, 0x49	; 73
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    239a:	ec e4       	ldi	r30, 0x4C	; 76
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    23a0:	ed e4       	ldi	r30, 0x4D	; 77
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    23a6:	e6 e4       	ldi	r30, 0x46	; 70
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    23ac:	e7 e4       	ldi	r30, 0x47	; 71
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	10 82       	st	Z, r1
  
}
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <TIM1_voidEnable>:
void TIM1_voidEnable(u8 u8PrescalValCpy)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	0f 92       	push	r0
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    23c4:	ae e4       	ldi	r26, 0x4E	; 78
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	ee e4       	ldi	r30, 0x4E	; 78
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	88 7f       	andi	r24, 0xF8	; 248
    23d0:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    23d2:	ae e4       	ldi	r26, 0x4E	; 78
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	ee e4       	ldi	r30, 0x4E	; 78
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	98 2f       	mov	r25, r24
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	87 70       	andi	r24, 0x07	; 7
    23e2:	89 2b       	or	r24, r25
    23e4:	8c 93       	st	X, r24
	
}
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    23f6:	ae e4       	ldi	r26, 0x4E	; 78
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	ee e4       	ldi	r30, 0x4E	; 78
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	88 7f       	andi	r24, 0xF8	; 248
    2402:	8c 93       	st	X, r24
	
}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    2412:	a9 e5       	ldi	r26, 0x59	; 89
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e9 e5       	ldi	r30, 0x59	; 89
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	84 60       	ori	r24, 0x04	; 4
    241e:	8c 93       	st	X, r24
	
}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    242e:	a9 e5       	ldi	r26, 0x59	; 89
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e9 e5       	ldi	r30, 0x59	; 89
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	8b 7f       	andi	r24, 0xFB	; 251
    243a:	8c 93       	st	X, r24
	
}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    244a:	a9 e5       	ldi	r26, 0x59	; 89
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e9 e5       	ldi	r30, 0x59	; 89
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	80 61       	ori	r24, 0x10	; 16
    2456:	8c 93       	st	X, r24
	
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    2466:	a9 e5       	ldi	r26, 0x59	; 89
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e9 e5       	ldi	r30, 0x59	; 89
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	8f 7e       	andi	r24, 0xEF	; 239
    2472:	8c 93       	st	X, r24
	
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    2482:	a9 e5       	ldi	r26, 0x59	; 89
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e9 e5       	ldi	r30, 0x59	; 89
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	88 60       	ori	r24, 0x08	; 8
    248e:	8c 93       	st	X, r24
	
}
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    249e:	a9 e5       	ldi	r26, 0x59	; 89
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e9 e5       	ldi	r30, 0x59	; 89
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	87 7f       	andi	r24, 0xF7	; 247
    24aa:	8c 93       	st	X, r24
	
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <TIM1_voidEnableIcu>:
void TIM1_voidEnableIcu(void)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    24ba:	a9 e5       	ldi	r26, 0x59	; 89
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e9 e5       	ldi	r30, 0x59	; 89
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 62       	ori	r24, 0x20	; 32
    24c6:	8c 93       	st	X, r24
}
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <TIM1_voidDisableIcu>:
void TIM1_voidDisableIcu(void)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    24d6:	a9 e5       	ldi	r26, 0x59	; 89
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e9 e5       	ldi	r30, 0x59	; 89
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7d       	andi	r24, 0xDF	; 223
    24e2:	8c 93       	st	X, r24
}
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <TIM1_voidSetCallbackOvfInt+0x6>
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	90 93 61 01 	sts	0x0161, r25
    2500:	80 93 60 01 	sts	0x0160, r24
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <TIM1_voidSetCallbackCompAInt+0x6>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	90 93 63 01 	sts	0x0163, r25
    2524:	80 93 62 01 	sts	0x0162, r24
}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <TIM1_voidSetCallbackCompBInt+0x6>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	90 93 5d 01 	sts	0x015D, r25
    2548:	80 93 5c 01 	sts	0x015C, r24
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <TIM1_voidSetCallbackIcu>:
void TIM1_voidSetCallbackIcu(pf pfIcuCalbckCpy)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <TIM1_voidSetCallbackIcu+0x6>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	90 93 5f 01 	sts	0x015F, r25
    256c:	80 93 5e 01 	sts	0x015E, r24
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(u16 u16TimValCpy) //TCNT
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <TIM1_voidSetTimerValue+0x6>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(u8) u16TimValCpy;
    2588:	ec e4       	ldi	r30, 0x4C	; 76
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	80 83       	st	Z, r24
	TCNT1H =(u8) (u16TimValCpy>>8);
    2590:	ed e4       	ldi	r30, 0x4D	; 77
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	89 2f       	mov	r24, r25
    259a:	99 27       	eor	r25, r25
    259c:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(u16 u16CmpAValCpy)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <TIM1_voidSetCmpARegValue+0x6>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (u8)u16CmpAValCpy;
    25b6:	ea e4       	ldi	r30, 0x4A	; 74
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	80 83       	st	Z, r24
	OCR1AH= (u8)(u16CmpAValCpy>>8);
    25be:	eb e4       	ldi	r30, 0x4B	; 75
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	89 2f       	mov	r24, r25
    25c8:	99 27       	eor	r25, r25
    25ca:	80 83       	st	Z, r24
	
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(u16 u16CmpBValCpy)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <TIM1_voidSetCmpBRegValue+0x6>
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (u8)u16CmpBValCpy;
    25e4:	e8 e4       	ldi	r30, 0x48	; 72
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	80 83       	st	Z, r24
	OCR1BH= (u8)(u16CmpBValCpy>>8);
    25ec:	e9 e4       	ldi	r30, 0x49	; 73
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	89 2f       	mov	r24, r25
    25f6:	99 27       	eor	r25, r25
    25f8:	80 83       	st	Z, r24
	
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(u16 u16IcuValCpy)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <TIM1_voidSetIcuRegValue+0x6>
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    2612:	e6 e4       	ldi	r30, 0x46	; 70
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24

}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <TIM1_u8ReadTimerValue>:
u16 TIM1_u8ReadTimerValue(void)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	00 d0       	rcall	.+0      	; 0x262e <TIM1_u8ReadTimerValue+0x6>
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	u16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    2632:	ed e4       	ldi	r30, 0x4D	; 77
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	9a 81       	ldd	r25, Y+2	; 0x02
    2644:	98 2f       	mov	r25, r24
    2646:	88 27       	eor	r24, r24
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    264c:	ec e4       	ldi	r30, 0x4C	; 76
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	82 2b       	or	r24, r18
    265c:	93 2b       	or	r25, r19
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	2f 93       	push	r18
    267c:	3f 93       	push	r19
    267e:	4f 93       	push	r20
    2680:	5f 93       	push	r21
    2682:	6f 93       	push	r22
    2684:	7f 93       	push	r23
    2686:	8f 93       	push	r24
    2688:	9f 93       	push	r25
    268a:	af 93       	push	r26
    268c:	bf 93       	push	r27
    268e:	ef 93       	push	r30
    2690:	ff 93       	push	r31
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    269a:	e0 91 60 01 	lds	r30, 0x0160
    269e:	f0 91 61 01 	lds	r31, 0x0161
    26a2:	09 95       	icall
	
}
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	ff 91       	pop	r31
    26aa:	ef 91       	pop	r30
    26ac:	bf 91       	pop	r27
    26ae:	af 91       	pop	r26
    26b0:	9f 91       	pop	r25
    26b2:	8f 91       	pop	r24
    26b4:	7f 91       	pop	r23
    26b6:	6f 91       	pop	r22
    26b8:	5f 91       	pop	r21
    26ba:	4f 91       	pop	r20
    26bc:	3f 91       	pop	r19
    26be:	2f 91       	pop	r18
    26c0:	0f 90       	pop	r0
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	0f 90       	pop	r0
    26c6:	1f 90       	pop	r1
    26c8:	18 95       	reti

000026ca <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    26ca:	1f 92       	push	r1
    26cc:	0f 92       	push	r0
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	0f 92       	push	r0
    26d2:	11 24       	eor	r1, r1
    26d4:	2f 93       	push	r18
    26d6:	3f 93       	push	r19
    26d8:	4f 93       	push	r20
    26da:	5f 93       	push	r21
    26dc:	6f 93       	push	r22
    26de:	7f 93       	push	r23
    26e0:	8f 93       	push	r24
    26e2:	9f 93       	push	r25
    26e4:	af 93       	push	r26
    26e6:	bf 93       	push	r27
    26e8:	ef 93       	push	r30
    26ea:	ff 93       	push	r31
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    26f4:	e0 91 62 01 	lds	r30, 0x0162
    26f8:	f0 91 63 01 	lds	r31, 0x0163
    26fc:	09 95       	icall
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	ff 91       	pop	r31
    2704:	ef 91       	pop	r30
    2706:	bf 91       	pop	r27
    2708:	af 91       	pop	r26
    270a:	9f 91       	pop	r25
    270c:	8f 91       	pop	r24
    270e:	7f 91       	pop	r23
    2710:	6f 91       	pop	r22
    2712:	5f 91       	pop	r21
    2714:	4f 91       	pop	r20
    2716:	3f 91       	pop	r19
    2718:	2f 91       	pop	r18
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	0f 90       	pop	r0
    2720:	1f 90       	pop	r1
    2722:	18 95       	reti

00002724 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    2724:	1f 92       	push	r1
    2726:	0f 92       	push	r0
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	0f 92       	push	r0
    272c:	11 24       	eor	r1, r1
    272e:	2f 93       	push	r18
    2730:	3f 93       	push	r19
    2732:	4f 93       	push	r20
    2734:	5f 93       	push	r21
    2736:	6f 93       	push	r22
    2738:	7f 93       	push	r23
    273a:	8f 93       	push	r24
    273c:	9f 93       	push	r25
    273e:	af 93       	push	r26
    2740:	bf 93       	push	r27
    2742:	ef 93       	push	r30
    2744:	ff 93       	push	r31
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    274e:	e0 91 5c 01 	lds	r30, 0x015C
    2752:	f0 91 5d 01 	lds	r31, 0x015D
    2756:	09 95       	icall
}
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	ff 91       	pop	r31
    275e:	ef 91       	pop	r30
    2760:	bf 91       	pop	r27
    2762:	af 91       	pop	r26
    2764:	9f 91       	pop	r25
    2766:	8f 91       	pop	r24
    2768:	7f 91       	pop	r23
    276a:	6f 91       	pop	r22
    276c:	5f 91       	pop	r21
    276e:	4f 91       	pop	r20
    2770:	3f 91       	pop	r19
    2772:	2f 91       	pop	r18
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	0f 90       	pop	r0
    277a:	1f 90       	pop	r1
    277c:	18 95       	reti

0000277e <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    277e:	1f 92       	push	r1
    2780:	0f 92       	push	r0
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	0f 92       	push	r0
    2786:	11 24       	eor	r1, r1
    2788:	2f 93       	push	r18
    278a:	3f 93       	push	r19
    278c:	4f 93       	push	r20
    278e:	5f 93       	push	r21
    2790:	6f 93       	push	r22
    2792:	7f 93       	push	r23
    2794:	8f 93       	push	r24
    2796:	9f 93       	push	r25
    2798:	af 93       	push	r26
    279a:	bf 93       	push	r27
    279c:	ef 93       	push	r30
    279e:	ff 93       	push	r31
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    27a8:	e0 91 5e 01 	lds	r30, 0x015E
    27ac:	f0 91 5f 01 	lds	r31, 0x015F
    27b0:	09 95       	icall
}
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	ff 91       	pop	r31
    27b8:	ef 91       	pop	r30
    27ba:	bf 91       	pop	r27
    27bc:	af 91       	pop	r26
    27be:	9f 91       	pop	r25
    27c0:	8f 91       	pop	r24
    27c2:	7f 91       	pop	r23
    27c4:	6f 91       	pop	r22
    27c6:	5f 91       	pop	r21
    27c8:	4f 91       	pop	r20
    27ca:	3f 91       	pop	r19
    27cc:	2f 91       	pop	r18
    27ce:	0f 90       	pop	r0
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	0f 90       	pop	r0
    27d4:	1f 90       	pop	r1
    27d6:	18 95       	reti

000027d8 <TIM1_u16GetIcuValue>:

/*ICU*/


u16 TIM1_u16GetIcuValue(void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    27e0:	e6 e4       	ldi	r30, 0x46	; 70
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
}
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    27f6:	ae e4       	ldi	r26, 0x4E	; 78
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ee e4       	ldi	r30, 0x4E	; 78
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	80 64       	ori	r24, 0x40	; 64
    2802:	8c 93       	st	X, r24
 }
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    2812:	ae e4       	ldi	r26, 0x4E	; 78
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	ee e4       	ldi	r30, 0x4E	; 78
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	8f 7b       	andi	r24, 0xBF	; 191
    281e:	8c 93       	st	X, r24
 }
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <UART_vInit>:
#include <util/delay.h>
#include <avr/io.h>
#include "std_macros.h"

void UART_vInit(unsigned long baud)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	00 d0       	rcall	.+0      	; 0x282c <UART_vInit+0x6>
    282c:	00 d0       	rcall	.+0      	; 0x282e <UART_vInit+0x8>
    282e:	00 d0       	rcall	.+0      	; 0x2830 <UART_vInit+0xa>
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	6b 83       	std	Y+3, r22	; 0x03
    2836:	7c 83       	std	Y+4, r23	; 0x04
    2838:	8d 83       	std	Y+5, r24	; 0x05
    283a:	9e 83       	std	Y+6, r25	; 0x06
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	unsigned short UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	ad 81       	ldd	r26, Y+5	; 0x05
    2842:	be 81       	ldd	r27, Y+6	; 0x06
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	aa 1f       	adc	r26, r26
    284a:	bb 1f       	adc	r27, r27
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	aa 1f       	adc	r26, r26
    2852:	bb 1f       	adc	r27, r27
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	aa 1f       	adc	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	aa 1f       	adc	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	9c 01       	movw	r18, r24
    2866:	ad 01       	movw	r20, r26
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	92 e1       	ldi	r25, 0x12	; 18
    286c:	aa e7       	ldi	r26, 0x7A	; 122
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__udivmodsi4>
    2878:	da 01       	movw	r26, r20
    287a:	c9 01       	movw	r24, r18
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
	UBRRH=(unsigned char)(UBRR>>8);
    2882:	e0 e4       	ldi	r30, 0x40	; 64
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	89 2f       	mov	r24, r25
    288c:	99 27       	eor	r25, r25
    288e:	80 83       	st	Z, r24
	UBRRL=(unsigned char)UBRR;
    2890:	e9 e2       	ldi	r30, 0x29	; 41
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	80 83       	st	Z, r24
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
    2898:	aa e2       	ldi	r26, 0x2A	; 42
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ea e2       	ldi	r30, 0x2A	; 42
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	88 60       	ori	r24, 0x08	; 8
    28a4:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    28a6:	aa e2       	ldi	r26, 0x2A	; 42
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	ea e2       	ldi	r30, 0x2A	; 42
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	80 61       	ori	r24, 0x10	; 16
    28b2:	8c 93       	st	X, r24
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    28b4:	e0 e4       	ldi	r30, 0x40	; 64
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	86 e8       	ldi	r24, 0x86	; 134
    28ba:	80 83       	st	Z, r24
}
    28bc:	26 96       	adiw	r28, 0x06	; 6
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <UART_vSendData>:

void UART_vSendData(char data)
{
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	0f 92       	push	r0
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
    28da:	eb e2       	ldi	r30, 0x2B	; 43
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	80 72       	andi	r24, 0x20	; 32
    28e6:	90 70       	andi	r25, 0x00	; 0
    28e8:	95 95       	asr	r25
    28ea:	87 95       	ror	r24
    28ec:	95 95       	asr	r25
    28ee:	87 95       	ror	r24
    28f0:	95 95       	asr	r25
    28f2:	87 95       	ror	r24
    28f4:	95 95       	asr	r25
    28f6:	87 95       	ror	r24
    28f8:	95 95       	asr	r25
    28fa:	87 95       	ror	r24
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f3       	breq	.-38     	; 0x28da <UART_vSendData+0xc>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
    2900:	ec e2       	ldi	r30, 0x2C	; 44
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	80 83       	st	Z, r24
}
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <UART_u8ReceiveData>:

char UART_u8ReceiveData(void)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
    2918:	eb e2       	ldi	r30, 0x2B	; 43
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	88 1f       	adc	r24, r24
    2920:	88 27       	eor	r24, r24
    2922:	88 1f       	adc	r24, r24
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	90 70       	andi	r25, 0x00	; 0
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	a9 f3       	breq	.-22     	; 0x2918 <UART_u8ReceiveData+0x8>
	/*Receive data from UDR receive buffer*/
	return UDR ;
    292e:	ec e2       	ldi	r30, 0x2C	; 44
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <UART_vSendstring>:
void UART_vSendstring( char *ptr)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	60 97       	sbiw	r28, 0x10	; 16
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	98 8b       	std	Y+16, r25	; 0x10
    2950:	8f 87       	std	Y+15, r24	; 0x0f
    2952:	7c c0       	rjmp	.+248    	; 0x2a4c <UART_vSendstring+0x112>
	while(*ptr!=0)
	{
		UART_vSendData(*ptr);
    2954:	ef 85       	ldd	r30, Y+15	; 0x0f
    2956:	f8 89       	ldd	r31, Y+16	; 0x10
    2958:	80 81       	ld	r24, Z
    295a:	0e 94 67 14 	call	0x28ce	; 0x28ce <UART_vSendData>
		ptr++;
    295e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2960:	98 89       	ldd	r25, Y+16	; 0x10
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	98 8b       	std	Y+16, r25	; 0x10
    2966:	8f 87       	std	Y+15, r24	; 0x0f
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	a8 ec       	ldi	r26, 0xC8	; 200
    296e:	b2 e4       	ldi	r27, 0x42	; 66
    2970:	8b 87       	std	Y+11, r24	; 0x0b
    2972:	9c 87       	std	Y+12, r25	; 0x0c
    2974:	ad 87       	std	Y+13, r26	; 0x0d
    2976:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2978:	6b 85       	ldd	r22, Y+11	; 0x0b
    297a:	7c 85       	ldd	r23, Y+12	; 0x0c
    297c:	8d 85       	ldd	r24, Y+13	; 0x0d
    297e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4a ef       	ldi	r20, 0xFA	; 250
    2986:	54 e4       	ldi	r21, 0x44	; 68
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	8f 83       	std	Y+7, r24	; 0x07
    2992:	98 87       	std	Y+8, r25	; 0x08
    2994:	a9 87       	std	Y+9, r26	; 0x09
    2996:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2998:	6f 81       	ldd	r22, Y+7	; 0x07
    299a:	78 85       	ldd	r23, Y+8	; 0x08
    299c:	89 85       	ldd	r24, Y+9	; 0x09
    299e:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	2c f4       	brge	.+10     	; 0x29ba <UART_vSendstring+0x80>
		__ticks = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	3f c0       	rjmp	.+126    	; 0x2a38 <UART_vSendstring+0xfe>
	else if (__tmp > 65535)
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	3f ef       	ldi	r19, 0xFF	; 255
    29c6:	4f e7       	ldi	r20, 0x7F	; 127
    29c8:	57 e4       	ldi	r21, 0x47	; 71
    29ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ce:	18 16       	cp	r1, r24
    29d0:	4c f5       	brge	.+82     	; 0x2a24 <UART_vSendstring+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e2       	ldi	r20, 0x20	; 32
    29e0:	51 e4       	ldi	r21, 0x41	; 65
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <UART_vSendstring+0xe0>
    29fc:	88 ec       	ldi	r24, 0xC8	; 200
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9c 83       	std	Y+4, r25	; 0x04
    2a02:	8b 83       	std	Y+3, r24	; 0x03
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	9c 81       	ldd	r25, Y+4	; 0x04
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <UART_vSendstring+0xce>
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a10:	8d 81       	ldd	r24, Y+5	; 0x05
    2a12:	9e 81       	ldd	r25, Y+6	; 0x06
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	9e 83       	std	Y+6, r25	; 0x06
    2a18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	69 f7       	brne	.-38     	; 0x29fc <UART_vSendstring+0xc2>
    2a22:	14 c0       	rjmp	.+40     	; 0x2a4c <UART_vSendstring+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a24:	6f 81       	ldd	r22, Y+7	; 0x07
    2a26:	78 85       	ldd	r23, Y+8	; 0x08
    2a28:	89 85       	ldd	r24, Y+9	; 0x09
    2a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	9a 81       	ldd	r25, Y+2	; 0x02
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <UART_vSendstring+0x10a>
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01
	/*Receive data from UDR receive buffer*/
	return UDR ;
}
void UART_vSendstring( char *ptr)
{
	while(*ptr!=0)
    2a4c:	ef 85       	ldd	r30, Y+15	; 0x0f
    2a4e:	f8 89       	ldd	r31, Y+16	; 0x10
    2a50:	80 81       	ld	r24, Z
    2a52:	88 23       	and	r24, r24
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <UART_vSendstring+0x11e>
    2a56:	7e cf       	rjmp	.-260    	; 0x2954 <UART_vSendstring+0x1a>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
    2a58:	60 96       	adiw	r28, 0x10	; 16
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <main>:
#include "SPI.h"
#include "TIM1.h"

void SERVO_ON(void);
int main(void)
{
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	ca 5f       	subi	r28, 0xFA	; 250
    2a78:	d0 40       	sbci	r29, 0x00	; 0
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61

	TIM1_voidInit();
    2a84:	0e 94 46 11 	call	0x228c	; 0x228c <TIM1_voidInit>
		TIM1_voidSetIcuRegValue(20000);
    2a88:	80 e2       	ldi	r24, 0x20	; 32
    2a8a:	9e e4       	ldi	r25, 0x4E	; 78
    2a8c:	0e 94 02 13 	call	0x2604	; 0x2604 <TIM1_voidSetIcuRegValue>
		TIM1_voidEnable(2);
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <TIM1_voidEnable>
		//Global_Interrupt_Enable();

    SPI_vInitMaster();
    2a96:	0e 94 00 11 	call	0x2200	; 0x2200 <SPI_vInitMaster>
	UART_vInit(9600);
    2a9a:	60 e8       	ldi	r22, 0x80	; 128
    2a9c:	75 e2       	ldi	r23, 0x25	; 37
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 13 14 	call	0x2826	; 0x2826 <UART_vInit>
	u8 R_PC;     //holds the value UART transmission
	LCD_vInit();
    2aa6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_vInit>
	u8 status = Entery_status ;//default status of the system
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e9 51       	subi	r30, 0x19	; 25
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	10 82       	st	Z, r1
	u8 Password[4];
	u8 True_Password[]={'1','2','3','4'};
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e3 51       	subi	r30, 0x13	; 19
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	81 e3       	ldi	r24, 0x31	; 49
    2aba:	80 83       	st	Z, r24
    2abc:	fe 01       	movw	r30, r28
    2abe:	e3 51       	subi	r30, 0x13	; 19
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	82 e3       	ldi	r24, 0x32	; 50
    2ac4:	81 83       	std	Z+1, r24	; 0x01
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e3 51       	subi	r30, 0x13	; 19
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	83 e3       	ldi	r24, 0x33	; 51
    2ace:	82 83       	std	Z+2, r24	; 0x02
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e3 51       	subi	r30, 0x13	; 19
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	84 e3       	ldi	r24, 0x34	; 52
    2ad8:	83 83       	std	Z+3, r24	; 0x03
	u8 Password_flag =0;//indicates if there is any fault in the password entered by the user
    2ada:	fe 01       	movw	r30, r28
    2adc:	ea 51       	subi	r30, 0x1A	; 26
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	10 82       	st	Z, r1
	u16 temperatue= 0 ;
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	ec 51       	subi	r30, 0x1C	; 28
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	11 82       	std	Z+1, r1	; 0x01
    2aea:	10 82       	st	Z, r1
	 u8 t=0;
    2aec:	fe 01       	movw	r30, r28
    2aee:	ed 51       	subi	r30, 0x1D	; 29
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	10 82       	st	Z, r1
	 u8 l=0;
    2af4:	fe 01       	movw	r30, r28
    2af6:	ee 51       	subi	r30, 0x1E	; 30
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	10 82       	st	Z, r1

	DIO_vsetPINDir('B',4,HIGH);//DC_MOTOR pin that represents the AC
    2afc:	82 e4       	ldi	r24, 0x42	; 66
    2afe:	64 e0       	ldi	r22, 0x04	; 4
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>


	// setting LEDs pins as output
	DIO_vsetPINDir('C',0,HIGH);
    2b06:	83 e4       	ldi	r24, 0x43	; 67
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('C',1,HIGH);
    2b10:	83 e4       	ldi	r24, 0x43	; 67
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('C',2,HIGH);
    2b1a:	83 e4       	ldi	r24, 0x43	; 67
    2b1c:	62 e0       	ldi	r22, 0x02	; 2
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('C',3,HIGH);
    2b24:	83 e4       	ldi	r24, 0x43	; 67
    2b26:	63 e0       	ldi	r22, 0x03	; 3
    2b28:	41 e0       	ldi	r20, 0x01	; 1
    2b2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>

	while (1)
	{

		switch(status)
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e9 51       	subi	r30, 0x19	; 25
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	c7 50       	subi	r28, 0x07	; 7
    2b3c:	df 4f       	sbci	r29, 0xFF	; 255
    2b3e:	39 83       	std	Y+1, r19	; 0x01
    2b40:	28 83       	st	Y, r18
    2b42:	c9 5f       	subi	r28, 0xF9	; 249
    2b44:	d0 40       	sbci	r29, 0x00	; 0
    2b46:	c7 50       	subi	r28, 0x07	; 7
    2b48:	df 4f       	sbci	r29, 0xFF	; 255
    2b4a:	88 81       	ld	r24, Y
    2b4c:	99 81       	ldd	r25, Y+1	; 0x01
    2b4e:	c9 5f       	subi	r28, 0xF9	; 249
    2b50:	d0 40       	sbci	r29, 0x00	; 0
    2b52:	82 30       	cpi	r24, 0x02	; 2
    2b54:	91 05       	cpc	r25, r1
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <main+0xf0>
    2b58:	bd c5       	rjmp	.+2938   	; 0x36d4 <main+0xc6a>
    2b5a:	c7 50       	subi	r28, 0x07	; 7
    2b5c:	df 4f       	sbci	r29, 0xFF	; 255
    2b5e:	e8 81       	ld	r30, Y
    2b60:	f9 81       	ldd	r31, Y+1	; 0x01
    2b62:	c9 5f       	subi	r28, 0xF9	; 249
    2b64:	d0 40       	sbci	r29, 0x00	; 0
    2b66:	e3 30       	cpi	r30, 0x03	; 3
    2b68:	f1 05       	cpc	r31, r1
    2b6a:	a4 f4       	brge	.+40     	; 0x2b94 <main+0x12a>
    2b6c:	c7 50       	subi	r28, 0x07	; 7
    2b6e:	df 4f       	sbci	r29, 0xFF	; 255
    2b70:	28 81       	ld	r18, Y
    2b72:	39 81       	ldd	r19, Y+1	; 0x01
    2b74:	c9 5f       	subi	r28, 0xF9	; 249
    2b76:	d0 40       	sbci	r29, 0x00	; 0
    2b78:	21 15       	cp	r18, r1
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	61 f1       	breq	.+88     	; 0x2bd6 <main+0x16c>
    2b7e:	c7 50       	subi	r28, 0x07	; 7
    2b80:	df 4f       	sbci	r29, 0xFF	; 255
    2b82:	88 81       	ld	r24, Y
    2b84:	99 81       	ldd	r25, Y+1	; 0x01
    2b86:	c9 5f       	subi	r28, 0xF9	; 249
    2b88:	d0 40       	sbci	r29, 0x00	; 0
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <main+0x128>
    2b90:	b2 c1       	rjmp	.+868    	; 0x2ef6 <main+0x48c>
    2b92:	cd cf       	rjmp	.-102    	; 0x2b2e <main+0xc4>
    2b94:	c7 50       	subi	r28, 0x07	; 7
    2b96:	df 4f       	sbci	r29, 0xFF	; 255
    2b98:	e8 81       	ld	r30, Y
    2b9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2b9c:	c9 5f       	subi	r28, 0xF9	; 249
    2b9e:	d0 40       	sbci	r29, 0x00	; 0
    2ba0:	e4 30       	cpi	r30, 0x04	; 4
    2ba2:	f1 05       	cpc	r31, r1
    2ba4:	11 f4       	brne	.+4      	; 0x2baa <main+0x140>
    2ba6:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <main+0x1376>
    2baa:	c7 50       	subi	r28, 0x07	; 7
    2bac:	df 4f       	sbci	r29, 0xFF	; 255
    2bae:	28 81       	ld	r18, Y
    2bb0:	39 81       	ldd	r19, Y+1	; 0x01
    2bb2:	c9 5f       	subi	r28, 0xF9	; 249
    2bb4:	d0 40       	sbci	r29, 0x00	; 0
    2bb6:	24 30       	cpi	r18, 0x04	; 4
    2bb8:	31 05       	cpc	r19, r1
    2bba:	0c f4       	brge	.+2      	; 0x2bbe <main+0x154>
    2bbc:	62 c7       	rjmp	.+3780   	; 0x3a82 <main+0x1018>
    2bbe:	c7 50       	subi	r28, 0x07	; 7
    2bc0:	df 4f       	sbci	r29, 0xFF	; 255
    2bc2:	88 81       	ld	r24, Y
    2bc4:	99 81       	ldd	r25, Y+1	; 0x01
    2bc6:	c9 5f       	subi	r28, 0xF9	; 249
    2bc8:	d0 40       	sbci	r29, 0x00	; 0
    2bca:	85 30       	cpi	r24, 0x05	; 5
    2bcc:	91 05       	cpc	r25, r1
    2bce:	11 f4       	brne	.+4      	; 0x2bd4 <main+0x16a>
    2bd0:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <main+0x1992>
    2bd4:	ac cf       	rjmp	.-168    	; 0x2b2e <main+0xc4>
				{


				/************this stage represent the entery mood os the system*************/
					case  Entery_status :
					       LCD_movecursor(1,1);
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					       LCD_vSend_string("Welcole to Smart");
    2bde:	80 e6       	ldi	r24, 0x60	; 96
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
						   LCD_movecursor(2,1);
    2be6:	82 e0       	ldi	r24, 0x02	; 2
    2be8:	61 e0       	ldi	r22, 0x01	; 1
    2bea:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
						   LCD_vSend_string("Home project :)");
    2bee:	81 e7       	ldi	r24, 0x71	; 113
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e3 52       	subi	r30, 0x23	; 35
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	aa e7       	ldi	r26, 0x7A	; 122
    2c02:	b4 e4       	ldi	r27, 0x44	; 68
    2c04:	80 83       	st	Z, r24
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	a2 83       	std	Z+2, r26	; 0x02
    2c0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0c:	8e 01       	movw	r16, r28
    2c0e:	07 52       	subi	r16, 0x27	; 39
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	fe 01       	movw	r30, r28
    2c14:	e3 52       	subi	r30, 0x23	; 35
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a ef       	ldi	r20, 0xFA	; 250
    2c26:	54 e4       	ldi	r21, 0x44	; 68
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	f8 01       	movw	r30, r16
    2c32:	80 83       	st	Z, r24
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	a2 83       	std	Z+2, r26	; 0x02
    2c38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e7 52       	subi	r30, 0x27	; 39
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	60 81       	ld	r22, Z
    2c42:	71 81       	ldd	r23, Z+1	; 0x01
    2c44:	82 81       	ldd	r24, Z+2	; 0x02
    2c46:	93 81       	ldd	r25, Z+3	; 0x03
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	44 f4       	brge	.+16     	; 0x2c68 <main+0x1fe>
		__ticks = 1;
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e9 52       	subi	r30, 0x29	; 41
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	91 83       	std	Z+1, r25	; 0x01
    2c64:	80 83       	st	Z, r24
    2c66:	64 c0       	rjmp	.+200    	; 0x2d30 <main+0x2c6>
	else if (__tmp > 65535)
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e7 52       	subi	r30, 0x27	; 39
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	60 81       	ld	r22, Z
    2c70:	71 81       	ldd	r23, Z+1	; 0x01
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	93 81       	ldd	r25, Z+3	; 0x03
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	3f ef       	ldi	r19, 0xFF	; 255
    2c7a:	4f e7       	ldi	r20, 0x7F	; 127
    2c7c:	57 e4       	ldi	r21, 0x47	; 71
    2c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c82:	18 16       	cp	r1, r24
    2c84:	0c f0       	brlt	.+2      	; 0x2c88 <main+0x21e>
    2c86:	43 c0       	rjmp	.+134    	; 0x2d0e <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e3 52       	subi	r30, 0x23	; 35
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	8e 01       	movw	r16, r28
    2ca8:	09 52       	subi	r16, 0x29	; 41
    2caa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	f8 01       	movw	r30, r16
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	1f c0       	rjmp	.+62     	; 0x2cfe <main+0x294>
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	eb 52       	subi	r30, 0x2B	; 43
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	88 ec       	ldi	r24, 0xC8	; 200
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24
    2cce:	fe 01       	movw	r30, r28
    2cd0:	eb 52       	subi	r30, 0x2B	; 43
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	91 81       	ldd	r25, Z+1	; 0x01
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <main+0x26e>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	eb 52       	subi	r30, 0x2B	; 43
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce6:	de 01       	movw	r26, r28
    2ce8:	a9 52       	subi	r26, 0x29	; 41
    2cea:	bf 4f       	sbci	r27, 0xFF	; 255
    2cec:	fe 01       	movw	r30, r28
    2cee:	e9 52       	subi	r30, 0x29	; 41
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	11 96       	adiw	r26, 0x01	; 1
    2cfa:	9c 93       	st	X, r25
    2cfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e9 52       	subi	r30, 0x29	; 41
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	d1 f6       	brne	.-76     	; 0x2cc0 <main+0x256>
    2d0c:	27 c0       	rjmp	.+78     	; 0x2d5c <main+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0e:	8e 01       	movw	r16, r28
    2d10:	09 52       	subi	r16, 0x29	; 41
    2d12:	1f 4f       	sbci	r17, 0xFF	; 255
    2d14:	fe 01       	movw	r30, r28
    2d16:	e7 52       	subi	r30, 0x27	; 39
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	f8 01       	movw	r30, r16
    2d2c:	91 83       	std	Z+1, r25	; 0x01
    2d2e:	80 83       	st	Z, r24
    2d30:	de 01       	movw	r26, r28
    2d32:	ad 52       	subi	r26, 0x2D	; 45
    2d34:	bf 4f       	sbci	r27, 0xFF	; 255
    2d36:	fe 01       	movw	r30, r28
    2d38:	e9 52       	subi	r30, 0x29	; 41
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	8d 93       	st	X+, r24
    2d42:	9c 93       	st	X, r25
    2d44:	fe 01       	movw	r30, r28
    2d46:	ed 52       	subi	r30, 0x2D	; 45
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	f1 f7       	brne	.-4      	; 0x2d4e <main+0x2e4>
    2d52:	fe 01       	movw	r30, r28
    2d54:	ed 52       	subi	r30, 0x2D	; 45
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
						   _delay_ms(1000);
						   LCD_clearscreen();
    2d5c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
						   LCD_movecursor(1,1);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	61 e0       	ldi	r22, 0x01	; 1
    2d64:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
						   LCD_vSend_string("You are at :");
    2d68:	81 e8       	ldi	r24, 0x81	; 129
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
						   LCD_movecursor(2,1);
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
						   LCD_vSend_string("Entery Mode");
    2d78:	8e e8       	ldi	r24, 0x8E	; 142
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    2d80:	fe 01       	movw	r30, r28
    2d82:	e1 53       	subi	r30, 0x31	; 49
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	aa e7       	ldi	r26, 0x7A	; 122
    2d8c:	b4 e4       	ldi	r27, 0x44	; 68
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	8e 01       	movw	r16, r28
    2d98:	05 53       	subi	r16, 0x35	; 53
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e1 53       	subi	r30, 0x31	; 49
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	f8 01       	movw	r30, r16
    2dbc:	80 83       	st	Z, r24
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	a2 83       	std	Z+2, r26	; 0x02
    2dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e5 53       	subi	r30, 0x35	; 53
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	44 f4       	brge	.+16     	; 0x2df2 <main+0x388>
		__ticks = 1;
    2de2:	fe 01       	movw	r30, r28
    2de4:	e7 53       	subi	r30, 0x37	; 55
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	64 c0       	rjmp	.+200    	; 0x2eba <main+0x450>
	else if (__tmp > 65535)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e5 53       	subi	r30, 0x35	; 53
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f0       	brlt	.+2      	; 0x2e12 <main+0x3a8>
    2e10:	43 c0       	rjmp	.+134    	; 0x2e98 <main+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e12:	fe 01       	movw	r30, r28
    2e14:	e1 53       	subi	r30, 0x31	; 49
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8e 01       	movw	r16, r28
    2e32:	07 53       	subi	r16, 0x37	; 55
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	f8 01       	movw	r30, r16
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	80 83       	st	Z, r24
    2e48:	1f c0       	rjmp	.+62     	; 0x2e88 <main+0x41e>
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e9 53       	subi	r30, 0x39	; 57
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	88 ec       	ldi	r24, 0xC8	; 200
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e9 53       	subi	r30, 0x39	; 57
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <main+0x3f8>
    2e66:	fe 01       	movw	r30, r28
    2e68:	e9 53       	subi	r30, 0x39	; 57
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	de 01       	movw	r26, r28
    2e72:	a7 53       	subi	r26, 0x37	; 55
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	e7 53       	subi	r30, 0x37	; 55
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	11 96       	adiw	r26, 0x01	; 1
    2e84:	9c 93       	st	X, r25
    2e86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e7 53       	subi	r30, 0x37	; 55
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	d1 f6       	brne	.-76     	; 0x2e4a <main+0x3e0>
    2e96:	27 c0       	rjmp	.+78     	; 0x2ee6 <main+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	8e 01       	movw	r16, r28
    2e9a:	07 53       	subi	r16, 0x37	; 55
    2e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e5 53       	subi	r30, 0x35	; 53
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	de 01       	movw	r26, r28
    2ebc:	ab 53       	subi	r26, 0x3B	; 59
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e7 53       	subi	r30, 0x37	; 55
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	8d 93       	st	X+, r24
    2ecc:	9c 93       	st	X, r25
    2ece:	fe 01       	movw	r30, r28
    2ed0:	eb 53       	subi	r30, 0x3B	; 59
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <main+0x46e>
    2edc:	fe 01       	movw	r30, r28
    2ede:	eb 53       	subi	r30, 0x3B	; 59
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
					       _delay_ms(1000);
					       LCD_clearscreen();
    2ee6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
						   status = Login_Status ;
    2eea:	fe 01       	movw	r30, r28
    2eec:	e9 51       	subi	r30, 0x19	; 25
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	80 83       	st	Z, r24
    2ef4:	1c ce       	rjmp	.-968    	; 0x2b2e <main+0xc4>
						   break;
		          /***************at this stage the user is asked to enter the password**********************/
					case Login_Status :
					     LCD_movecursor(1,1);
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					     LCD_vSend_string("Loging in.....");
    2efe:	8a e9       	ldi	r24, 0x9A	; 154
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    2f06:	fe 01       	movw	r30, r28
    2f08:	ef 53       	subi	r30, 0x3F	; 63
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e8       	ldi	r25, 0x80	; 128
    2f10:	ab eb       	ldi	r26, 0xBB	; 187
    2f12:	b4 e4       	ldi	r27, 0x44	; 68
    2f14:	80 83       	st	Z, r24
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	a2 83       	std	Z+2, r26	; 0x02
    2f1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1c:	8e 01       	movw	r16, r28
    2f1e:	03 54       	subi	r16, 0x43	; 67
    2f20:	1f 4f       	sbci	r17, 0xFF	; 255
    2f22:	fe 01       	movw	r30, r28
    2f24:	ef 53       	subi	r30, 0x3F	; 63
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	60 81       	ld	r22, Z
    2f2a:	71 81       	ldd	r23, Z+1	; 0x01
    2f2c:	82 81       	ldd	r24, Z+2	; 0x02
    2f2e:	93 81       	ldd	r25, Z+3	; 0x03
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	4a ef       	ldi	r20, 0xFA	; 250
    2f36:	54 e4       	ldi	r21, 0x44	; 68
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	f8 01       	movw	r30, r16
    2f42:	80 83       	st	Z, r24
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	a2 83       	std	Z+2, r26	; 0x02
    2f48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e3 54       	subi	r30, 0x43	; 67
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e8       	ldi	r20, 0x80	; 128
    2f5e:	5f e3       	ldi	r21, 0x3F	; 63
    2f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f64:	88 23       	and	r24, r24
    2f66:	44 f4       	brge	.+16     	; 0x2f78 <main+0x50e>
		__ticks = 1;
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e5 54       	subi	r30, 0x45	; 69
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	80 83       	st	Z, r24
    2f76:	64 c0       	rjmp	.+200    	; 0x3040 <main+0x5d6>
	else if (__tmp > 65535)
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e3 54       	subi	r30, 0x43	; 67
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	3f ef       	ldi	r19, 0xFF	; 255
    2f8a:	4f e7       	ldi	r20, 0x7F	; 127
    2f8c:	57 e4       	ldi	r21, 0x47	; 71
    2f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	0c f0       	brlt	.+2      	; 0x2f98 <main+0x52e>
    2f96:	43 c0       	rjmp	.+134    	; 0x301e <main+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ef 53       	subi	r30, 0x3F	; 63
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	60 81       	ld	r22, Z
    2fa0:	71 81       	ldd	r23, Z+1	; 0x01
    2fa2:	82 81       	ldd	r24, Z+2	; 0x02
    2fa4:	93 81       	ldd	r25, Z+3	; 0x03
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e2       	ldi	r20, 0x20	; 32
    2fac:	51 e4       	ldi	r21, 0x41	; 65
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	8e 01       	movw	r16, r28
    2fb8:	05 54       	subi	r16, 0x45	; 69
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	f8 01       	movw	r30, r16
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	80 83       	st	Z, r24
    2fce:	1f c0       	rjmp	.+62     	; 0x300e <main+0x5a4>
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e7 54       	subi	r30, 0x47	; 71
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	88 ec       	ldi	r24, 0xC8	; 200
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	91 83       	std	Z+1, r25	; 0x01
    2fdc:	80 83       	st	Z, r24
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e7 54       	subi	r30, 0x47	; 71
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <main+0x57e>
    2fec:	fe 01       	movw	r30, r28
    2fee:	e7 54       	subi	r30, 0x47	; 71
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	91 83       	std	Z+1, r25	; 0x01
    2ff4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff6:	de 01       	movw	r26, r28
    2ff8:	a5 54       	subi	r26, 0x45	; 69
    2ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 54       	subi	r30, 0x45	; 69
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	80 81       	ld	r24, Z
    3004:	91 81       	ldd	r25, Z+1	; 0x01
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	11 96       	adiw	r26, 0x01	; 1
    300a:	9c 93       	st	X, r25
    300c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300e:	fe 01       	movw	r30, r28
    3010:	e5 54       	subi	r30, 0x45	; 69
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	91 81       	ldd	r25, Z+1	; 0x01
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	d1 f6       	brne	.-76     	; 0x2fd0 <main+0x566>
    301c:	27 c0       	rjmp	.+78     	; 0x306c <main+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301e:	8e 01       	movw	r16, r28
    3020:	05 54       	subi	r16, 0x45	; 69
    3022:	1f 4f       	sbci	r17, 0xFF	; 255
    3024:	fe 01       	movw	r30, r28
    3026:	e3 54       	subi	r30, 0x43	; 67
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	f8 01       	movw	r30, r16
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
    3040:	de 01       	movw	r26, r28
    3042:	a9 54       	subi	r26, 0x49	; 73
    3044:	bf 4f       	sbci	r27, 0xFF	; 255
    3046:	fe 01       	movw	r30, r28
    3048:	e5 54       	subi	r30, 0x45	; 69
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 81       	ld	r24, Z
    304e:	91 81       	ldd	r25, Z+1	; 0x01
    3050:	8d 93       	st	X+, r24
    3052:	9c 93       	st	X, r25
    3054:	fe 01       	movw	r30, r28
    3056:	e9 54       	subi	r30, 0x49	; 73
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <main+0x5f4>
    3062:	fe 01       	movw	r30, r28
    3064:	e9 54       	subi	r30, 0x49	; 73
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
						 _delay_ms(1500);
					     LCD_clearscreen();
    306c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
						 LCD_movecursor(1,1);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	61 e0       	ldi	r22, 0x01	; 1
    3074:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
						 LCD_vSend_string("Please Enter ");
    3078:	89 ea       	ldi	r24, 0xA9	; 169
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
						 LCD_movecursor(2,1);
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	61 e0       	ldi	r22, 0x01	; 1
    3084:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
						 LCD_vSend_string("Password :");
    3088:	87 eb       	ldi	r24, 0xB7	; 183
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    3090:	fe 01       	movw	r30, r28
    3092:	ed 54       	subi	r30, 0x4D	; 77
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e8       	ldi	r25, 0x80	; 128
    309a:	ab eb       	ldi	r26, 0xBB	; 187
    309c:	b4 e4       	ldi	r27, 0x44	; 68
    309e:	80 83       	st	Z, r24
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	a2 83       	std	Z+2, r26	; 0x02
    30a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	8e 01       	movw	r16, r28
    30a8:	01 55       	subi	r16, 0x51	; 81
    30aa:	1f 4f       	sbci	r17, 0xFF	; 255
    30ac:	fe 01       	movw	r30, r28
    30ae:	ed 54       	subi	r30, 0x4D	; 77
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	4a ef       	ldi	r20, 0xFA	; 250
    30c0:	54 e4       	ldi	r21, 0x44	; 68
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	f8 01       	movw	r30, r16
    30cc:	80 83       	st	Z, r24
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	a2 83       	std	Z+2, r26	; 0x02
    30d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30d4:	fe 01       	movw	r30, r28
    30d6:	e1 55       	subi	r30, 0x51	; 81
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	60 81       	ld	r22, Z
    30dc:	71 81       	ldd	r23, Z+1	; 0x01
    30de:	82 81       	ldd	r24, Z+2	; 0x02
    30e0:	93 81       	ldd	r25, Z+3	; 0x03
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e8       	ldi	r20, 0x80	; 128
    30e8:	5f e3       	ldi	r21, 0x3F	; 63
    30ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ee:	88 23       	and	r24, r24
    30f0:	44 f4       	brge	.+16     	; 0x3102 <main+0x698>
		__ticks = 1;
    30f2:	fe 01       	movw	r30, r28
    30f4:	e3 55       	subi	r30, 0x53	; 83
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	64 c0       	rjmp	.+200    	; 0x31ca <main+0x760>
	else if (__tmp > 65535)
    3102:	fe 01       	movw	r30, r28
    3104:	e1 55       	subi	r30, 0x51	; 81
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	57 e4       	ldi	r21, 0x47	; 71
    3118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    311c:	18 16       	cp	r1, r24
    311e:	0c f0       	brlt	.+2      	; 0x3122 <main+0x6b8>
    3120:	43 c0       	rjmp	.+134    	; 0x31a8 <main+0x73e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3122:	fe 01       	movw	r30, r28
    3124:	ed 54       	subi	r30, 0x4D	; 77
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e2       	ldi	r20, 0x20	; 32
    3136:	51 e4       	ldi	r21, 0x41	; 65
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	8e 01       	movw	r16, r28
    3142:	03 55       	subi	r16, 0x53	; 83
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	f8 01       	movw	r30, r16
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	80 83       	st	Z, r24
    3158:	1f c0       	rjmp	.+62     	; 0x3198 <main+0x72e>
    315a:	fe 01       	movw	r30, r28
    315c:	e5 55       	subi	r30, 0x55	; 85
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	88 ec       	ldi	r24, 0xC8	; 200
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	80 83       	st	Z, r24
    3168:	fe 01       	movw	r30, r28
    316a:	e5 55       	subi	r30, 0x55	; 85
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 81       	ld	r24, Z
    3170:	91 81       	ldd	r25, Z+1	; 0x01
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <main+0x708>
    3176:	fe 01       	movw	r30, r28
    3178:	e5 55       	subi	r30, 0x55	; 85
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	de 01       	movw	r26, r28
    3182:	a3 55       	subi	r26, 0x53	; 83
    3184:	bf 4f       	sbci	r27, 0xFF	; 255
    3186:	fe 01       	movw	r30, r28
    3188:	e3 55       	subi	r30, 0x53	; 83
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	11 96       	adiw	r26, 0x01	; 1
    3194:	9c 93       	st	X, r25
    3196:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3198:	fe 01       	movw	r30, r28
    319a:	e3 55       	subi	r30, 0x53	; 83
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	d1 f6       	brne	.-76     	; 0x315a <main+0x6f0>
    31a6:	28 c0       	rjmp	.+80     	; 0x31f8 <main+0x78e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a8:	8e 01       	movw	r16, r28
    31aa:	03 55       	subi	r16, 0x53	; 83
    31ac:	1f 4f       	sbci	r17, 0xFF	; 255
    31ae:	fe 01       	movw	r30, r28
    31b0:	e1 55       	subi	r30, 0x51	; 81
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	f8 01       	movw	r30, r16
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	80 83       	st	Z, r24
    31ca:	de 01       	movw	r26, r28
    31cc:	a7 55       	subi	r26, 0x57	; 87
    31ce:	bf 4f       	sbci	r27, 0xFF	; 255
    31d0:	fe 01       	movw	r30, r28
    31d2:	e3 55       	subi	r30, 0x53	; 83
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	80 81       	ld	r24, Z
    31d8:	91 81       	ldd	r25, Z+1	; 0x01
    31da:	11 96       	adiw	r26, 0x01	; 1
    31dc:	9c 93       	st	X, r25
    31de:	8e 93       	st	-X, r24
    31e0:	fe 01       	movw	r30, r28
    31e2:	e7 55       	subi	r30, 0x57	; 87
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	80 81       	ld	r24, Z
    31e8:	91 81       	ldd	r25, Z+1	; 0x01
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <main+0x780>
    31ee:	fe 01       	movw	r30, r28
    31f0:	e7 55       	subi	r30, 0x57	; 87
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
						 _delay_ms(1500);

						   u8 i=0;
    31f8:	fe 01       	movw	r30, r28
    31fa:	ef 51       	subi	r30, 0x1F	; 31
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	10 82       	st	Z, r1
						   for(i=0;i<=3;i++)
    3200:	fe 01       	movw	r30, r28
    3202:	ef 51       	subi	r30, 0x1F	; 31
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	10 82       	st	Z, r1
    3208:	a3 c1       	rjmp	.+838    	; 0x3550 <main+0xae6>
						   {
							   R_PC=UART_u8ReceiveData();
    320a:	0e 94 88 14 	call	0x2910	; 0x2910 <UART_u8ReceiveData>
    320e:	fe 01       	movw	r30, r28
    3210:	e8 51       	subi	r30, 0x18	; 24
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	80 83       	st	Z, r24
							   Password[i]=R_PC;
    3216:	fe 01       	movw	r30, r28
    3218:	ef 51       	subi	r30, 0x1F	; 31
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	80 81       	ld	r24, Z
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	ce 01       	movw	r24, r28
    3224:	87 51       	subi	r24, 0x17	; 23
    3226:	9f 4f       	sbci	r25, 0xFF	; 255
    3228:	dc 01       	movw	r26, r24
    322a:	a2 0f       	add	r26, r18
    322c:	b3 1f       	adc	r27, r19
    322e:	fe 01       	movw	r30, r28
    3230:	e8 51       	subi	r30, 0x18	; 24
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	8c 93       	st	X, r24
							   LCD_movecursor(2,(11+i));
    3238:	fe 01       	movw	r30, r28
    323a:	ef 51       	subi	r30, 0x1F	; 31
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	98 2f       	mov	r25, r24
    3242:	95 5f       	subi	r25, 0xF5	; 245
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	69 2f       	mov	r22, r25
    3248:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
							    LCD_vSend_char(R_PC);
    324c:	fe 01       	movw	r30, r28
    324e:	e8 51       	subi	r30, 0x18	; 24
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 81       	ld	r24, Z
    3254:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <LCD_vSend_char>
    3258:	fe 01       	movw	r30, r28
    325a:	eb 55       	subi	r30, 0x5B	; 91
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	aa e7       	ldi	r26, 0x7A	; 122
    3264:	b3 e4       	ldi	r27, 0x43	; 67
    3266:	80 83       	st	Z, r24
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	a2 83       	std	Z+2, r26	; 0x02
    326c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326e:	8e 01       	movw	r16, r28
    3270:	0f 55       	subi	r16, 0x5F	; 95
    3272:	1f 4f       	sbci	r17, 0xFF	; 255
    3274:	fe 01       	movw	r30, r28
    3276:	eb 55       	subi	r30, 0x5B	; 91
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	93 81       	ldd	r25, Z+3	; 0x03
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a ef       	ldi	r20, 0xFA	; 250
    3288:	54 e4       	ldi	r21, 0x44	; 68
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	f8 01       	movw	r30, r16
    3294:	80 83       	st	Z, r24
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	a2 83       	std	Z+2, r26	; 0x02
    329a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    329c:	fe 01       	movw	r30, r28
    329e:	ef 55       	subi	r30, 0x5F	; 95
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	44 f4       	brge	.+16     	; 0x32ca <main+0x860>
		__ticks = 1;
    32ba:	fe 01       	movw	r30, r28
    32bc:	e1 56       	subi	r30, 0x61	; 97
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	91 83       	std	Z+1, r25	; 0x01
    32c6:	80 83       	st	Z, r24
    32c8:	64 c0       	rjmp	.+200    	; 0x3392 <main+0x928>
	else if (__tmp > 65535)
    32ca:	fe 01       	movw	r30, r28
    32cc:	ef 55       	subi	r30, 0x5F	; 95
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	57 e4       	ldi	r21, 0x47	; 71
    32e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <main+0x880>
    32e8:	43 c0       	rjmp	.+134    	; 0x3370 <main+0x906>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ea:	fe 01       	movw	r30, r28
    32ec:	eb 55       	subi	r30, 0x5B	; 91
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e2       	ldi	r20, 0x20	; 32
    32fe:	51 e4       	ldi	r21, 0x41	; 65
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	8e 01       	movw	r16, r28
    330a:	01 56       	subi	r16, 0x61	; 97
    330c:	1f 4f       	sbci	r17, 0xFF	; 255
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	f8 01       	movw	r30, r16
    331c:	91 83       	std	Z+1, r25	; 0x01
    331e:	80 83       	st	Z, r24
    3320:	1f c0       	rjmp	.+62     	; 0x3360 <main+0x8f6>
    3322:	fe 01       	movw	r30, r28
    3324:	e3 56       	subi	r30, 0x63	; 99
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	88 ec       	ldi	r24, 0xC8	; 200
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	80 83       	st	Z, r24
    3330:	fe 01       	movw	r30, r28
    3332:	e3 56       	subi	r30, 0x63	; 99
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <main+0x8d0>
    333e:	fe 01       	movw	r30, r28
    3340:	e3 56       	subi	r30, 0x63	; 99
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	de 01       	movw	r26, r28
    334a:	a1 56       	subi	r26, 0x61	; 97
    334c:	bf 4f       	sbci	r27, 0xFF	; 255
    334e:	fe 01       	movw	r30, r28
    3350:	e1 56       	subi	r30, 0x61	; 97
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	11 96       	adiw	r26, 0x01	; 1
    335c:	9c 93       	st	X, r25
    335e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3360:	fe 01       	movw	r30, r28
    3362:	e1 56       	subi	r30, 0x61	; 97
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	d1 f6       	brne	.-76     	; 0x3322 <main+0x8b8>
    336e:	27 c0       	rjmp	.+78     	; 0x33be <main+0x954>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	8e 01       	movw	r16, r28
    3372:	01 56       	subi	r16, 0x61	; 97
    3374:	1f 4f       	sbci	r17, 0xFF	; 255
    3376:	fe 01       	movw	r30, r28
    3378:	ef 55       	subi	r30, 0x5F	; 95
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	60 81       	ld	r22, Z
    337e:	71 81       	ldd	r23, Z+1	; 0x01
    3380:	82 81       	ldd	r24, Z+2	; 0x02
    3382:	93 81       	ldd	r25, Z+3	; 0x03
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	f8 01       	movw	r30, r16
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
    3392:	de 01       	movw	r26, r28
    3394:	a5 56       	subi	r26, 0x65	; 101
    3396:	bf 4f       	sbci	r27, 0xFF	; 255
    3398:	fe 01       	movw	r30, r28
    339a:	e1 56       	subi	r30, 0x61	; 97
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	8d 93       	st	X+, r24
    33a4:	9c 93       	st	X, r25
    33a6:	fe 01       	movw	r30, r28
    33a8:	e5 56       	subi	r30, 0x65	; 101
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <main+0x946>
    33b4:	fe 01       	movw	r30, r28
    33b6:	e5 56       	subi	r30, 0x65	; 101
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	80 83       	st	Z, r24
								_delay_ms(250);
								LCD_movecursor(2,(11+i));
    33be:	fe 01       	movw	r30, r28
    33c0:	ef 51       	subi	r30, 0x1F	; 31
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	80 81       	ld	r24, Z
    33c6:	98 2f       	mov	r25, r24
    33c8:	95 5f       	subi	r25, 0xF5	; 245
    33ca:	82 e0       	ldi	r24, 0x02	; 2
    33cc:	69 2f       	mov	r22, r25
    33ce:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
								LCD_vSend_char('X');
    33d2:	88 e5       	ldi	r24, 0x58	; 88
    33d4:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <LCD_vSend_char>
    33d8:	fe 01       	movw	r30, r28
    33da:	e9 56       	subi	r30, 0x69	; 105
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	aa ef       	ldi	r26, 0xFA	; 250
    33e4:	b3 e4       	ldi	r27, 0x43	; 67
    33e6:	80 83       	st	Z, r24
    33e8:	91 83       	std	Z+1, r25	; 0x01
    33ea:	a2 83       	std	Z+2, r26	; 0x02
    33ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ee:	8e 01       	movw	r16, r28
    33f0:	0d 56       	subi	r16, 0x6D	; 109
    33f2:	1f 4f       	sbci	r17, 0xFF	; 255
    33f4:	fe 01       	movw	r30, r28
    33f6:	e9 56       	subi	r30, 0x69	; 105
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	60 81       	ld	r22, Z
    33fc:	71 81       	ldd	r23, Z+1	; 0x01
    33fe:	82 81       	ldd	r24, Z+2	; 0x02
    3400:	93 81       	ldd	r25, Z+3	; 0x03
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	4a ef       	ldi	r20, 0xFA	; 250
    3408:	54 e4       	ldi	r21, 0x44	; 68
    340a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	f8 01       	movw	r30, r16
    3414:	80 83       	st	Z, r24
    3416:	91 83       	std	Z+1, r25	; 0x01
    3418:	a2 83       	std	Z+2, r26	; 0x02
    341a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    341c:	fe 01       	movw	r30, r28
    341e:	ed 56       	subi	r30, 0x6D	; 109
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	60 81       	ld	r22, Z
    3424:	71 81       	ldd	r23, Z+1	; 0x01
    3426:	82 81       	ldd	r24, Z+2	; 0x02
    3428:	93 81       	ldd	r25, Z+3	; 0x03
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	5f e3       	ldi	r21, 0x3F	; 63
    3432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3436:	88 23       	and	r24, r24
    3438:	44 f4       	brge	.+16     	; 0x344a <main+0x9e0>
		__ticks = 1;
    343a:	fe 01       	movw	r30, r28
    343c:	ef 56       	subi	r30, 0x6F	; 111
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
    3448:	64 c0       	rjmp	.+200    	; 0x3512 <main+0xaa8>
	else if (__tmp > 65535)
    344a:	fe 01       	movw	r30, r28
    344c:	ed 56       	subi	r30, 0x6D	; 109
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	60 81       	ld	r22, Z
    3452:	71 81       	ldd	r23, Z+1	; 0x01
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	93 81       	ldd	r25, Z+3	; 0x03
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	3f ef       	ldi	r19, 0xFF	; 255
    345c:	4f e7       	ldi	r20, 0x7F	; 127
    345e:	57 e4       	ldi	r21, 0x47	; 71
    3460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3464:	18 16       	cp	r1, r24
    3466:	0c f0       	brlt	.+2      	; 0x346a <main+0xa00>
    3468:	43 c0       	rjmp	.+134    	; 0x34f0 <main+0xa86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346a:	fe 01       	movw	r30, r28
    346c:	e9 56       	subi	r30, 0x69	; 105
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	60 81       	ld	r22, Z
    3472:	71 81       	ldd	r23, Z+1	; 0x01
    3474:	82 81       	ldd	r24, Z+2	; 0x02
    3476:	93 81       	ldd	r25, Z+3	; 0x03
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e2       	ldi	r20, 0x20	; 32
    347e:	51 e4       	ldi	r21, 0x41	; 65
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8e 01       	movw	r16, r28
    348a:	0f 56       	subi	r16, 0x6F	; 111
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	f8 01       	movw	r30, r16
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    34a0:	1f c0       	rjmp	.+62     	; 0x34e0 <main+0xa76>
    34a2:	fe 01       	movw	r30, r28
    34a4:	e1 57       	subi	r30, 0x71	; 113
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	88 ec       	ldi	r24, 0xC8	; 200
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	91 83       	std	Z+1, r25	; 0x01
    34ae:	80 83       	st	Z, r24
    34b0:	fe 01       	movw	r30, r28
    34b2:	e1 57       	subi	r30, 0x71	; 113
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 81       	ld	r24, Z
    34b8:	91 81       	ldd	r25, Z+1	; 0x01
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <main+0xa50>
    34be:	fe 01       	movw	r30, r28
    34c0:	e1 57       	subi	r30, 0x71	; 113
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	91 83       	std	Z+1, r25	; 0x01
    34c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c8:	de 01       	movw	r26, r28
    34ca:	af 56       	subi	r26, 0x6F	; 111
    34cc:	bf 4f       	sbci	r27, 0xFF	; 255
    34ce:	fe 01       	movw	r30, r28
    34d0:	ef 56       	subi	r30, 0x6F	; 111
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	80 81       	ld	r24, Z
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	11 96       	adiw	r26, 0x01	; 1
    34dc:	9c 93       	st	X, r25
    34de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e0:	fe 01       	movw	r30, r28
    34e2:	ef 56       	subi	r30, 0x6F	; 111
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	d1 f6       	brne	.-76     	; 0x34a2 <main+0xa38>
    34ee:	27 c0       	rjmp	.+78     	; 0x353e <main+0xad4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f0:	8e 01       	movw	r16, r28
    34f2:	0f 56       	subi	r16, 0x6F	; 111
    34f4:	1f 4f       	sbci	r17, 0xFF	; 255
    34f6:	fe 01       	movw	r30, r28
    34f8:	ed 56       	subi	r30, 0x6D	; 109
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	60 81       	ld	r22, Z
    34fe:	71 81       	ldd	r23, Z+1	; 0x01
    3500:	82 81       	ldd	r24, Z+2	; 0x02
    3502:	93 81       	ldd	r25, Z+3	; 0x03
    3504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	f8 01       	movw	r30, r16
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    3512:	de 01       	movw	r26, r28
    3514:	a3 57       	subi	r26, 0x73	; 115
    3516:	bf 4f       	sbci	r27, 0xFF	; 255
    3518:	fe 01       	movw	r30, r28
    351a:	ef 56       	subi	r30, 0x6F	; 111
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	8d 93       	st	X+, r24
    3524:	9c 93       	st	X, r25
    3526:	fe 01       	movw	r30, r28
    3528:	e3 57       	subi	r30, 0x73	; 115
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	80 81       	ld	r24, Z
    352e:	91 81       	ldd	r25, Z+1	; 0x01
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	f1 f7       	brne	.-4      	; 0x3530 <main+0xac6>
    3534:	fe 01       	movw	r30, r28
    3536:	e3 57       	subi	r30, 0x73	; 115
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	80 83       	st	Z, r24
						 LCD_movecursor(2,1);
						 LCD_vSend_string("Password :");
						 _delay_ms(1500);

						   u8 i=0;
						   for(i=0;i<=3;i++)
    353e:	de 01       	movw	r26, r28
    3540:	af 51       	subi	r26, 0x1F	; 31
    3542:	bf 4f       	sbci	r27, 0xFF	; 255
    3544:	fe 01       	movw	r30, r28
    3546:	ef 51       	subi	r30, 0x1F	; 31
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	80 81       	ld	r24, Z
    354c:	8f 5f       	subi	r24, 0xFF	; 255
    354e:	8c 93       	st	X, r24
    3550:	fe 01       	movw	r30, r28
    3552:	ef 51       	subi	r30, 0x1F	; 31
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	84 30       	cpi	r24, 0x04	; 4
    355a:	08 f4       	brcc	.+2      	; 0x355e <main+0xaf4>
    355c:	56 ce       	rjmp	.-852    	; 0x320a <main+0x7a0>
    355e:	fe 01       	movw	r30, r28
    3560:	e7 57       	subi	r30, 0x77	; 119
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	aa ef       	ldi	r26, 0xFA	; 250
    356a:	b3 e4       	ldi	r27, 0x43	; 67
    356c:	80 83       	st	Z, r24
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	a2 83       	std	Z+2, r26	; 0x02
    3572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3574:	8e 01       	movw	r16, r28
    3576:	0b 57       	subi	r16, 0x7B	; 123
    3578:	1f 4f       	sbci	r17, 0xFF	; 255
    357a:	fe 01       	movw	r30, r28
    357c:	e7 57       	subi	r30, 0x77	; 119
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	60 81       	ld	r22, Z
    3582:	71 81       	ldd	r23, Z+1	; 0x01
    3584:	82 81       	ldd	r24, Z+2	; 0x02
    3586:	93 81       	ldd	r25, Z+3	; 0x03
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	4a ef       	ldi	r20, 0xFA	; 250
    358e:	54 e4       	ldi	r21, 0x44	; 68
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	f8 01       	movw	r30, r16
    359a:	80 83       	st	Z, r24
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	a2 83       	std	Z+2, r26	; 0x02
    35a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35a2:	fe 01       	movw	r30, r28
    35a4:	eb 57       	subi	r30, 0x7B	; 123
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	60 81       	ld	r22, Z
    35aa:	71 81       	ldd	r23, Z+1	; 0x01
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e8       	ldi	r20, 0x80	; 128
    35b6:	5f e3       	ldi	r21, 0x3F	; 63
    35b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35bc:	88 23       	and	r24, r24
    35be:	44 f4       	brge	.+16     	; 0x35d0 <main+0xb66>
		__ticks = 1;
    35c0:	fe 01       	movw	r30, r28
    35c2:	ed 57       	subi	r30, 0x7D	; 125
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	80 83       	st	Z, r24
    35ce:	64 c0       	rjmp	.+200    	; 0x3698 <main+0xc2e>
	else if (__tmp > 65535)
    35d0:	fe 01       	movw	r30, r28
    35d2:	eb 57       	subi	r30, 0x7B	; 123
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	60 81       	ld	r22, Z
    35d8:	71 81       	ldd	r23, Z+1	; 0x01
    35da:	82 81       	ldd	r24, Z+2	; 0x02
    35dc:	93 81       	ldd	r25, Z+3	; 0x03
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	3f ef       	ldi	r19, 0xFF	; 255
    35e2:	4f e7       	ldi	r20, 0x7F	; 127
    35e4:	57 e4       	ldi	r21, 0x47	; 71
    35e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ea:	18 16       	cp	r1, r24
    35ec:	0c f0       	brlt	.+2      	; 0x35f0 <main+0xb86>
    35ee:	43 c0       	rjmp	.+134    	; 0x3676 <main+0xc0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f0:	fe 01       	movw	r30, r28
    35f2:	e7 57       	subi	r30, 0x77	; 119
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8e 01       	movw	r16, r28
    3610:	0d 57       	subi	r16, 0x7D	; 125
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	bc 01       	movw	r22, r24
    3616:	cd 01       	movw	r24, r26
    3618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	f8 01       	movw	r30, r16
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	80 83       	st	Z, r24
    3626:	1f c0       	rjmp	.+62     	; 0x3666 <main+0xbfc>
    3628:	fe 01       	movw	r30, r28
    362a:	ef 57       	subi	r30, 0x7F	; 127
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	88 ec       	ldi	r24, 0xC8	; 200
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	91 83       	std	Z+1, r25	; 0x01
    3634:	80 83       	st	Z, r24
    3636:	fe 01       	movw	r30, r28
    3638:	ef 57       	subi	r30, 0x7F	; 127
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	f1 f7       	brne	.-4      	; 0x3640 <main+0xbd6>
    3644:	fe 01       	movw	r30, r28
    3646:	ef 57       	subi	r30, 0x7F	; 127
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364e:	de 01       	movw	r26, r28
    3650:	ad 57       	subi	r26, 0x7D	; 125
    3652:	bf 4f       	sbci	r27, 0xFF	; 255
    3654:	fe 01       	movw	r30, r28
    3656:	ed 57       	subi	r30, 0x7D	; 125
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	80 81       	ld	r24, Z
    365c:	91 81       	ldd	r25, Z+1	; 0x01
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	11 96       	adiw	r26, 0x01	; 1
    3662:	9c 93       	st	X, r25
    3664:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3666:	fe 01       	movw	r30, r28
    3668:	ed 57       	subi	r30, 0x7D	; 125
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	80 81       	ld	r24, Z
    366e:	91 81       	ldd	r25, Z+1	; 0x01
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	d1 f6       	brne	.-76     	; 0x3628 <main+0xbbe>
    3674:	27 c0       	rjmp	.+78     	; 0x36c4 <main+0xc5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3676:	8e 01       	movw	r16, r28
    3678:	0d 57       	subi	r16, 0x7D	; 125
    367a:	1f 4f       	sbci	r17, 0xFF	; 255
    367c:	fe 01       	movw	r30, r28
    367e:	eb 57       	subi	r30, 0x7B	; 123
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	60 81       	ld	r22, Z
    3684:	71 81       	ldd	r23, Z+1	; 0x01
    3686:	82 81       	ldd	r24, Z+2	; 0x02
    3688:	93 81       	ldd	r25, Z+3	; 0x03
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	f8 01       	movw	r30, r16
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	de 01       	movw	r26, r28
    369a:	a1 58       	subi	r26, 0x81	; 129
    369c:	bf 4f       	sbci	r27, 0xFF	; 255
    369e:	fe 01       	movw	r30, r28
    36a0:	ed 57       	subi	r30, 0x7D	; 125
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 81       	ld	r24, Z
    36a6:	91 81       	ldd	r25, Z+1	; 0x01
    36a8:	8d 93       	st	X+, r24
    36aa:	9c 93       	st	X, r25
    36ac:	fe 01       	movw	r30, r28
    36ae:	e1 58       	subi	r30, 0x81	; 129
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	80 81       	ld	r24, Z
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <main+0xc4c>
    36ba:	fe 01       	movw	r30, r28
    36bc:	e1 58       	subi	r30, 0x81	; 129
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	91 83       	std	Z+1, r25	; 0x01
    36c2:	80 83       	st	Z, r24
								_delay_ms(500);


						   }
						   _delay_ms(500);
						   LCD_clearscreen();
    36c4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
						   status =Chicking_password;
    36c8:	fe 01       	movw	r30, r28
    36ca:	e9 51       	subi	r30, 0x19	; 25
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	80 83       	st	Z, r24
    36d2:	2d ca       	rjmp	.-2982   	; 0x2b2e <main+0xc4>


						   /***********this stage represents cheking the password****************/
					    case Chicking_password :

					    	LCD_clearscreen();
    36d4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>

					    	 for(i=0;i<=3;i++)
    36d8:	fe 01       	movw	r30, r28
    36da:	ef 51       	subi	r30, 0x1F	; 31
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	10 82       	st	Z, r1
    36e0:	2e c0       	rjmp	.+92     	; 0x373e <main+0xcd4>
					    	 {

					    		if(Password[i]!=True_Password[i])
    36e2:	fe 01       	movw	r30, r28
    36e4:	ef 51       	subi	r30, 0x1F	; 31
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 81       	ld	r24, Z
    36ea:	28 2f       	mov	r18, r24
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	ce 01       	movw	r24, r28
    36f0:	87 51       	subi	r24, 0x17	; 23
    36f2:	9f 4f       	sbci	r25, 0xFF	; 255
    36f4:	fc 01       	movw	r30, r24
    36f6:	e2 0f       	add	r30, r18
    36f8:	f3 1f       	adc	r31, r19
    36fa:	40 81       	ld	r20, Z
    36fc:	fe 01       	movw	r30, r28
    36fe:	ef 51       	subi	r30, 0x1F	; 31
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 81       	ld	r24, Z
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	ce 01       	movw	r24, r28
    370a:	83 51       	subi	r24, 0x13	; 19
    370c:	9f 4f       	sbci	r25, 0xFF	; 255
    370e:	fc 01       	movw	r30, r24
    3710:	e2 0f       	add	r30, r18
    3712:	f3 1f       	adc	r31, r19
    3714:	80 81       	ld	r24, Z
    3716:	48 17       	cp	r20, r24
    3718:	49 f0       	breq	.+18     	; 0x372c <main+0xcc2>
					    			{
					    			Password_flag++ ;
    371a:	de 01       	movw	r26, r28
    371c:	aa 51       	subi	r26, 0x1A	; 26
    371e:	bf 4f       	sbci	r27, 0xFF	; 255
    3720:	fe 01       	movw	r30, r28
    3722:	ea 51       	subi	r30, 0x1A	; 26
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	8f 5f       	subi	r24, 0xFF	; 255
    372a:	8c 93       	st	X, r24
						   /***********this stage represents cheking the password****************/
					    case Chicking_password :

					    	LCD_clearscreen();

					    	 for(i=0;i<=3;i++)
    372c:	de 01       	movw	r26, r28
    372e:	af 51       	subi	r26, 0x1F	; 31
    3730:	bf 4f       	sbci	r27, 0xFF	; 255
    3732:	fe 01       	movw	r30, r28
    3734:	ef 51       	subi	r30, 0x1F	; 31
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	80 81       	ld	r24, Z
    373a:	8f 5f       	subi	r24, 0xFF	; 255
    373c:	8c 93       	st	X, r24
    373e:	fe 01       	movw	r30, r28
    3740:	ef 51       	subi	r30, 0x1F	; 31
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	80 81       	ld	r24, Z
    3746:	84 30       	cpi	r24, 0x04	; 4
    3748:	60 f2       	brcs	.-104    	; 0x36e2 <main+0xc78>
					    			{
					    			Password_flag++ ;
					    			}

					    	 }
					    	 if(Password_flag>0)
    374a:	fe 01       	movw	r30, r28
    374c:	ea 51       	subi	r30, 0x1A	; 26
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	88 23       	and	r24, r24
    3754:	09 f4       	brne	.+2      	; 0x3758 <main+0xcee>
    3756:	cf c0       	rjmp	.+414    	; 0x38f6 <main+0xe8c>
					    	 {
					    	 	  LCD_clearscreen();
    3758:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
					    	 		LCD_movecursor(1,1);
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	61 e0       	ldi	r22, 0x01	; 1
    3760:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    	       LCD_vSend_string("WRONG PASSWORD");
    3764:	82 ec       	ldi	r24, 0xC2	; 194
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					    	       LCD_movecursor(2,1);
    376c:	82 e0       	ldi	r24, 0x02	; 2
    376e:	61 e0       	ldi	r22, 0x01	; 1
    3770:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    	       LCD_vSend_string("Please Try Again");
    3774:	81 ed       	ldi	r24, 0xD1	; 209
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					    	       Password_flag=0;
    377c:	fe 01       	movw	r30, r28
    377e:	ea 51       	subi	r30, 0x1A	; 26
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	10 82       	st	Z, r1
    3784:	fe 01       	movw	r30, r28
    3786:	e5 58       	subi	r30, 0x85	; 133
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	aa ef       	ldi	r26, 0xFA	; 250
    3790:	b3 e4       	ldi	r27, 0x43	; 67
    3792:	80 83       	st	Z, r24
    3794:	91 83       	std	Z+1, r25	; 0x01
    3796:	a2 83       	std	Z+2, r26	; 0x02
    3798:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    379a:	8e 01       	movw	r16, r28
    379c:	09 58       	subi	r16, 0x89	; 137
    379e:	1f 4f       	sbci	r17, 0xFF	; 255
    37a0:	fe 01       	movw	r30, r28
    37a2:	e5 58       	subi	r30, 0x85	; 133
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	60 81       	ld	r22, Z
    37a8:	71 81       	ldd	r23, Z+1	; 0x01
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	93 81       	ldd	r25, Z+3	; 0x03
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	4a ef       	ldi	r20, 0xFA	; 250
    37b4:	54 e4       	ldi	r21, 0x44	; 68
    37b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	f8 01       	movw	r30, r16
    37c0:	80 83       	st	Z, r24
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	a2 83       	std	Z+2, r26	; 0x02
    37c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37c8:	fe 01       	movw	r30, r28
    37ca:	e9 58       	subi	r30, 0x89	; 137
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	60 81       	ld	r22, Z
    37d0:	71 81       	ldd	r23, Z+1	; 0x01
    37d2:	82 81       	ldd	r24, Z+2	; 0x02
    37d4:	93 81       	ldd	r25, Z+3	; 0x03
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e8       	ldi	r20, 0x80	; 128
    37dc:	5f e3       	ldi	r21, 0x3F	; 63
    37de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37e2:	88 23       	and	r24, r24
    37e4:	44 f4       	brge	.+16     	; 0x37f6 <main+0xd8c>
		__ticks = 1;
    37e6:	fe 01       	movw	r30, r28
    37e8:	eb 58       	subi	r30, 0x8B	; 139
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	91 83       	std	Z+1, r25	; 0x01
    37f2:	80 83       	st	Z, r24
    37f4:	64 c0       	rjmp	.+200    	; 0x38be <main+0xe54>
	else if (__tmp > 65535)
    37f6:	fe 01       	movw	r30, r28
    37f8:	e9 58       	subi	r30, 0x89	; 137
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	60 81       	ld	r22, Z
    37fe:	71 81       	ldd	r23, Z+1	; 0x01
    3800:	82 81       	ldd	r24, Z+2	; 0x02
    3802:	93 81       	ldd	r25, Z+3	; 0x03
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	0c f0       	brlt	.+2      	; 0x3816 <main+0xdac>
    3814:	43 c0       	rjmp	.+134    	; 0x389c <main+0xe32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3816:	fe 01       	movw	r30, r28
    3818:	e5 58       	subi	r30, 0x85	; 133
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	60 81       	ld	r22, Z
    381e:	71 81       	ldd	r23, Z+1	; 0x01
    3820:	82 81       	ldd	r24, Z+2	; 0x02
    3822:	93 81       	ldd	r25, Z+3	; 0x03
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e2       	ldi	r20, 0x20	; 32
    382a:	51 e4       	ldi	r21, 0x41	; 65
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	8e 01       	movw	r16, r28
    3836:	0b 58       	subi	r16, 0x8B	; 139
    3838:	1f 4f       	sbci	r17, 0xFF	; 255
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	f8 01       	movw	r30, r16
    3848:	91 83       	std	Z+1, r25	; 0x01
    384a:	80 83       	st	Z, r24
    384c:	1f c0       	rjmp	.+62     	; 0x388c <main+0xe22>
    384e:	fe 01       	movw	r30, r28
    3850:	ed 58       	subi	r30, 0x8D	; 141
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	88 ec       	ldi	r24, 0xC8	; 200
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	91 83       	std	Z+1, r25	; 0x01
    385a:	80 83       	st	Z, r24
    385c:	fe 01       	movw	r30, r28
    385e:	ed 58       	subi	r30, 0x8D	; 141
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <main+0xdfc>
    386a:	fe 01       	movw	r30, r28
    386c:	ed 58       	subi	r30, 0x8D	; 141
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	91 83       	std	Z+1, r25	; 0x01
    3872:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	de 01       	movw	r26, r28
    3876:	ab 58       	subi	r26, 0x8B	; 139
    3878:	bf 4f       	sbci	r27, 0xFF	; 255
    387a:	fe 01       	movw	r30, r28
    387c:	eb 58       	subi	r30, 0x8B	; 139
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	91 81       	ldd	r25, Z+1	; 0x01
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	11 96       	adiw	r26, 0x01	; 1
    3888:	9c 93       	st	X, r25
    388a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388c:	fe 01       	movw	r30, r28
    388e:	eb 58       	subi	r30, 0x8B	; 139
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	00 97       	sbiw	r24, 0x00	; 0
    3898:	d1 f6       	brne	.-76     	; 0x384e <main+0xde4>
    389a:	28 c0       	rjmp	.+80     	; 0x38ec <main+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389c:	8e 01       	movw	r16, r28
    389e:	0b 58       	subi	r16, 0x8B	; 139
    38a0:	1f 4f       	sbci	r17, 0xFF	; 255
    38a2:	fe 01       	movw	r30, r28
    38a4:	e9 58       	subi	r30, 0x89	; 137
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	60 81       	ld	r22, Z
    38aa:	71 81       	ldd	r23, Z+1	; 0x01
    38ac:	82 81       	ldd	r24, Z+2	; 0x02
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	f8 01       	movw	r30, r16
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	80 83       	st	Z, r24
    38be:	de 01       	movw	r26, r28
    38c0:	af 58       	subi	r26, 0x8F	; 143
    38c2:	bf 4f       	sbci	r27, 0xFF	; 255
    38c4:	fe 01       	movw	r30, r28
    38c6:	eb 58       	subi	r30, 0x8B	; 139
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	11 96       	adiw	r26, 0x01	; 1
    38d0:	9c 93       	st	X, r25
    38d2:	8e 93       	st	-X, r24
    38d4:	fe 01       	movw	r30, r28
    38d6:	ef 58       	subi	r30, 0x8F	; 143
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 81       	ld	r24, Z
    38dc:	91 81       	ldd	r25, Z+1	; 0x01
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	f1 f7       	brne	.-4      	; 0x38de <main+0xe74>
    38e2:	fe 01       	movw	r30, r28
    38e4:	ef 58       	subi	r30, 0x8F	; 143
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	91 83       	std	Z+1, r25	; 0x01
    38ea:	80 83       	st	Z, r24
					    	       _delay_ms(500);
					    	 		 status = Entery_status ;
    38ec:	fe 01       	movw	r30, r28
    38ee:	e9 51       	subi	r30, 0x19	; 25
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	10 82       	st	Z, r1
    38f4:	1c c9       	rjmp	.-3528   	; 0x2b2e <main+0xc4>
					    	 }
					    	 else
					    	 {
					    		 LCD_clearscreen();
    38f6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
					    		LCD_movecursor(1,1);
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    	  LCD_vSend_string("CORRECT PASSWORD");
    3902:	82 ee       	ldi	r24, 0xE2	; 226
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>


					    		//Turn on Servo motor
					    	 SERVO_ON();//door is openning
    390a:	0e 94 5f 22 	call	0x44be	; 0x44be <SERVO_ON>
    390e:	fe 01       	movw	r30, r28
    3910:	e3 59       	subi	r30, 0x93	; 147
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	aa ef       	ldi	r26, 0xFA	; 250
    391a:	b3 e4       	ldi	r27, 0x43	; 67
    391c:	80 83       	st	Z, r24
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	a2 83       	std	Z+2, r26	; 0x02
    3922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3924:	8e 01       	movw	r16, r28
    3926:	07 59       	subi	r16, 0x97	; 151
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	fe 01       	movw	r30, r28
    392c:	e3 59       	subi	r30, 0x93	; 147
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	60 81       	ld	r22, Z
    3932:	71 81       	ldd	r23, Z+1	; 0x01
    3934:	82 81       	ldd	r24, Z+2	; 0x02
    3936:	93 81       	ldd	r25, Z+3	; 0x03
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	4a ef       	ldi	r20, 0xFA	; 250
    393e:	54 e4       	ldi	r21, 0x44	; 68
    3940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	f8 01       	movw	r30, r16
    394a:	80 83       	st	Z, r24
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	a2 83       	std	Z+2, r26	; 0x02
    3950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3952:	fe 01       	movw	r30, r28
    3954:	e7 59       	subi	r30, 0x97	; 151
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e8       	ldi	r20, 0x80	; 128
    3966:	5f e3       	ldi	r21, 0x3F	; 63
    3968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    396c:	88 23       	and	r24, r24
    396e:	44 f4       	brge	.+16     	; 0x3980 <main+0xf16>
		__ticks = 1;
    3970:	fe 01       	movw	r30, r28
    3972:	e9 59       	subi	r30, 0x99	; 153
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	64 c0       	rjmp	.+200    	; 0x3a48 <main+0xfde>
	else if (__tmp > 65535)
    3980:	fe 01       	movw	r30, r28
    3982:	e7 59       	subi	r30, 0x97	; 151
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	60 81       	ld	r22, Z
    3988:	71 81       	ldd	r23, Z+1	; 0x01
    398a:	82 81       	ldd	r24, Z+2	; 0x02
    398c:	93 81       	ldd	r25, Z+3	; 0x03
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	3f ef       	ldi	r19, 0xFF	; 255
    3992:	4f e7       	ldi	r20, 0x7F	; 127
    3994:	57 e4       	ldi	r21, 0x47	; 71
    3996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    399a:	18 16       	cp	r1, r24
    399c:	0c f0       	brlt	.+2      	; 0x39a0 <main+0xf36>
    399e:	43 c0       	rjmp	.+134    	; 0x3a26 <main+0xfbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a0:	fe 01       	movw	r30, r28
    39a2:	e3 59       	subi	r30, 0x93	; 147
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	40 e2       	ldi	r20, 0x20	; 32
    39b4:	51 e4       	ldi	r21, 0x41	; 65
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	8e 01       	movw	r16, r28
    39c0:	09 59       	subi	r16, 0x99	; 153
    39c2:	1f 4f       	sbci	r17, 0xFF	; 255
    39c4:	bc 01       	movw	r22, r24
    39c6:	cd 01       	movw	r24, r26
    39c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	f8 01       	movw	r30, r16
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
    39d6:	1f c0       	rjmp	.+62     	; 0x3a16 <main+0xfac>
    39d8:	fe 01       	movw	r30, r28
    39da:	eb 59       	subi	r30, 0x9B	; 155
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	88 ec       	ldi	r24, 0xC8	; 200
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	80 83       	st	Z, r24
    39e6:	fe 01       	movw	r30, r28
    39e8:	eb 59       	subi	r30, 0x9B	; 155
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	80 81       	ld	r24, Z
    39ee:	91 81       	ldd	r25, Z+1	; 0x01
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <main+0xf86>
    39f4:	fe 01       	movw	r30, r28
    39f6:	eb 59       	subi	r30, 0x9B	; 155
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	91 83       	std	Z+1, r25	; 0x01
    39fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39fe:	de 01       	movw	r26, r28
    3a00:	a9 59       	subi	r26, 0x99	; 153
    3a02:	bf 4f       	sbci	r27, 0xFF	; 255
    3a04:	fe 01       	movw	r30, r28
    3a06:	e9 59       	subi	r30, 0x99	; 153
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	11 96       	adiw	r26, 0x01	; 1
    3a12:	9c 93       	st	X, r25
    3a14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a16:	fe 01       	movw	r30, r28
    3a18:	e9 59       	subi	r30, 0x99	; 153
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 81       	ld	r24, Z
    3a1e:	91 81       	ldd	r25, Z+1	; 0x01
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	d1 f6       	brne	.-76     	; 0x39d8 <main+0xf6e>
    3a24:	28 c0       	rjmp	.+80     	; 0x3a76 <main+0x100c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a26:	8e 01       	movw	r16, r28
    3a28:	09 59       	subi	r16, 0x99	; 153
    3a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e7 59       	subi	r30, 0x97	; 151
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	f8 01       	movw	r30, r16
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	80 83       	st	Z, r24
    3a48:	de 01       	movw	r26, r28
    3a4a:	ad 59       	subi	r26, 0x9D	; 157
    3a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e9 59       	subi	r30, 0x99	; 153
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	80 81       	ld	r24, Z
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	11 96       	adiw	r26, 0x01	; 1
    3a5a:	9c 93       	st	X, r25
    3a5c:	8e 93       	st	-X, r24
    3a5e:	fe 01       	movw	r30, r28
    3a60:	ed 59       	subi	r30, 0x9D	; 157
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	80 81       	ld	r24, Z
    3a66:	91 81       	ldd	r25, Z+1	; 0x01
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <main+0xffe>
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	ed 59       	subi	r30, 0x9D	; 157
    3a70:	ff 4f       	sbci	r31, 0xFF	; 255
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	80 83       	st	Z, r24
					    		_delay_ms(500);
					    	 status = Main_menue ;
    3a76:	fe 01       	movw	r30, r28
    3a78:	e9 51       	subi	r30, 0x19	; 25
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	83 e0       	ldi	r24, 0x03	; 3
    3a7e:	80 83       	st	Z, r24
    3a80:	56 c8       	rjmp	.-3924   	; 0x2b2e <main+0xc4>


					break;
		          /*******************the options menue of the system***************************************/
					    case Main_menue :
					    	 LCD_clearscreen();
    3a82:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
					    	LCD_movecursor(1,1);
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	61 e0       	ldi	r22, 0x01	; 1
    3a8a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    	 LCD_vSend_string("A_C : (1) ");
    3a8e:	83 ef       	ldi	r24, 0xF3	; 243
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					    	 LCD_movecursor(2,1);
    3a96:	82 e0       	ldi	r24, 0x02	; 2
    3a98:	61 e0       	ldi	r22, 0x01	; 1
    3a9a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    	 LCD_vSend_string("Light : (2) ");
    3a9e:	8e ef       	ldi	r24, 0xFE	; 254
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>

					    	 R_PC=UART_u8ReceiveData();
    3aa6:	0e 94 88 14 	call	0x2910	; 0x2910 <UART_u8ReceiveData>
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e8 51       	subi	r30, 0x18	; 24
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 83       	st	Z, r24

					    	 switch(R_PC)
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	e8 51       	subi	r30, 0x18	; 24
    3ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab8:	80 81       	ld	r24, Z
    3aba:	28 2f       	mov	r18, r24
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	c9 50       	subi	r28, 0x09	; 9
    3ac0:	df 4f       	sbci	r29, 0xFF	; 255
    3ac2:	39 83       	std	Y+1, r19	; 0x01
    3ac4:	28 83       	st	Y, r18
    3ac6:	c7 5f       	subi	r28, 0xF7	; 247
    3ac8:	d0 40       	sbci	r29, 0x00	; 0
    3aca:	c9 50       	subi	r28, 0x09	; 9
    3acc:	df 4f       	sbci	r29, 0xFF	; 255
    3ace:	88 81       	ld	r24, Y
    3ad0:	99 81       	ldd	r25, Y+1	; 0x01
    3ad2:	c7 5f       	subi	r28, 0xF7	; 247
    3ad4:	d0 40       	sbci	r29, 0x00	; 0
    3ad6:	81 33       	cpi	r24, 0x31	; 49
    3ad8:	91 05       	cpc	r25, r1
    3ada:	61 f0       	breq	.+24     	; 0x3af4 <main+0x108a>
    3adc:	c9 50       	subi	r28, 0x09	; 9
    3ade:	df 4f       	sbci	r29, 0xFF	; 255
    3ae0:	e8 81       	ld	r30, Y
    3ae2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ae4:	c7 5f       	subi	r28, 0xF7	; 247
    3ae6:	d0 40       	sbci	r29, 0x00	; 0
    3ae8:	e2 33       	cpi	r30, 0x32	; 50
    3aea:	f1 05       	cpc	r31, r1
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <main+0x1086>
    3aee:	bd c0       	rjmp	.+378    	; 0x3c6a <main+0x1200>
    3af0:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>
    3af4:	fe 01       	movw	r30, r28
    3af6:	e1 5a       	subi	r30, 0xA1	; 161
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	aa ef       	ldi	r26, 0xFA	; 250
    3b00:	b3 e4       	ldi	r27, 0x43	; 67
    3b02:	80 83       	st	Z, r24
    3b04:	91 83       	std	Z+1, r25	; 0x01
    3b06:	a2 83       	std	Z+2, r26	; 0x02
    3b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0a:	8e 01       	movw	r16, r28
    3b0c:	05 5a       	subi	r16, 0xA5	; 165
    3b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b10:	fe 01       	movw	r30, r28
    3b12:	e1 5a       	subi	r30, 0xA1	; 161
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	82 81       	ldd	r24, Z+2	; 0x02
    3b1c:	93 81       	ldd	r25, Z+3	; 0x03
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	4a ef       	ldi	r20, 0xFA	; 250
    3b24:	54 e4       	ldi	r21, 0x44	; 68
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	f8 01       	movw	r30, r16
    3b30:	80 83       	st	Z, r24
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	a2 83       	std	Z+2, r26	; 0x02
    3b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e5 5a       	subi	r30, 0xA5	; 165
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e8       	ldi	r20, 0x80	; 128
    3b4c:	5f e3       	ldi	r21, 0x3F	; 63
    3b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b52:	88 23       	and	r24, r24
    3b54:	44 f4       	brge	.+16     	; 0x3b66 <main+0x10fc>
		__ticks = 1;
    3b56:	fe 01       	movw	r30, r28
    3b58:	e7 5a       	subi	r30, 0xA7	; 167
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	91 83       	std	Z+1, r25	; 0x01
    3b62:	80 83       	st	Z, r24
    3b64:	64 c0       	rjmp	.+200    	; 0x3c2e <main+0x11c4>
	else if (__tmp > 65535)
    3b66:	fe 01       	movw	r30, r28
    3b68:	e5 5a       	subi	r30, 0xA5	; 165
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	60 81       	ld	r22, Z
    3b6e:	71 81       	ldd	r23, Z+1	; 0x01
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	93 81       	ldd	r25, Z+3	; 0x03
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	3f ef       	ldi	r19, 0xFF	; 255
    3b78:	4f e7       	ldi	r20, 0x7F	; 127
    3b7a:	57 e4       	ldi	r21, 0x47	; 71
    3b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b80:	18 16       	cp	r1, r24
    3b82:	0c f0       	brlt	.+2      	; 0x3b86 <main+0x111c>
    3b84:	43 c0       	rjmp	.+134    	; 0x3c0c <main+0x11a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b86:	fe 01       	movw	r30, r28
    3b88:	e1 5a       	subi	r30, 0xA1	; 161
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e2       	ldi	r20, 0x20	; 32
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	8e 01       	movw	r16, r28
    3ba6:	07 5a       	subi	r16, 0xA7	; 167
    3ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    3baa:	bc 01       	movw	r22, r24
    3bac:	cd 01       	movw	r24, r26
    3bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	f8 01       	movw	r30, r16
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
    3bbc:	1f c0       	rjmp	.+62     	; 0x3bfc <main+0x1192>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e9 5a       	subi	r30, 0xA9	; 169
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	88 ec       	ldi	r24, 0xC8	; 200
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	80 83       	st	Z, r24
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e9 5a       	subi	r30, 0xA9	; 169
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <main+0x116c>
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e9 5a       	subi	r30, 0xA9	; 169
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	91 83       	std	Z+1, r25	; 0x01
    3be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be4:	de 01       	movw	r26, r28
    3be6:	a7 5a       	subi	r26, 0xA7	; 167
    3be8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bea:	fe 01       	movw	r30, r28
    3bec:	e7 5a       	subi	r30, 0xA7	; 167
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	11 96       	adiw	r26, 0x01	; 1
    3bf8:	9c 93       	st	X, r25
    3bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e7 5a       	subi	r30, 0xA7	; 167
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	80 81       	ld	r24, Z
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	d1 f6       	brne	.-76     	; 0x3bbe <main+0x1154>
    3c0a:	28 c0       	rjmp	.+80     	; 0x3c5c <main+0x11f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c0c:	8e 01       	movw	r16, r28
    3c0e:	07 5a       	subi	r16, 0xA7	; 167
    3c10:	1f 4f       	sbci	r17, 0xFF	; 255
    3c12:	fe 01       	movw	r30, r28
    3c14:	e5 5a       	subi	r30, 0xA5	; 165
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	60 81       	ld	r22, Z
    3c1a:	71 81       	ldd	r23, Z+1	; 0x01
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	f8 01       	movw	r30, r16
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
    3c2e:	de 01       	movw	r26, r28
    3c30:	ab 5a       	subi	r26, 0xAB	; 171
    3c32:	bf 4f       	sbci	r27, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	e7 5a       	subi	r30, 0xA7	; 167
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	11 96       	adiw	r26, 0x01	; 1
    3c40:	9c 93       	st	X, r25
    3c42:	8e 93       	st	-X, r24
    3c44:	fe 01       	movw	r30, r28
    3c46:	eb 5a       	subi	r30, 0xAB	; 171
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <main+0x11e4>
    3c52:	fe 01       	movw	r30, r28
    3c54:	eb 5a       	subi	r30, 0xAB	; 171
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	80 83       	st	Z, r24
					    	 {
					    	 case '1':
					    		 _delay_ms(500);
					    		 status = A_C ;
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e9 51       	subi	r30, 0x19	; 25
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	84 e0       	ldi	r24, 0x04	; 4
    3c64:	80 83       	st	Z, r24
    3c66:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>

					    		 break;
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	ef 5a       	subi	r30, 0xAF	; 175
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	aa ef       	ldi	r26, 0xFA	; 250
    3c76:	b3 e4       	ldi	r27, 0x43	; 67
    3c78:	80 83       	st	Z, r24
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	a2 83       	std	Z+2, r26	; 0x02
    3c7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c80:	8e 01       	movw	r16, r28
    3c82:	03 5b       	subi	r16, 0xB3	; 179
    3c84:	1f 4f       	sbci	r17, 0xFF	; 255
    3c86:	fe 01       	movw	r30, r28
    3c88:	ef 5a       	subi	r30, 0xAF	; 175
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	4a ef       	ldi	r20, 0xFA	; 250
    3c9a:	54 e4       	ldi	r21, 0x44	; 68
    3c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	f8 01       	movw	r30, r16
    3ca6:	80 83       	st	Z, r24
    3ca8:	91 83       	std	Z+1, r25	; 0x01
    3caa:	a2 83       	std	Z+2, r26	; 0x02
    3cac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e3 5b       	subi	r30, 0xB3	; 179
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	60 81       	ld	r22, Z
    3cb6:	71 81       	ldd	r23, Z+1	; 0x01
    3cb8:	82 81       	ldd	r24, Z+2	; 0x02
    3cba:	93 81       	ldd	r25, Z+3	; 0x03
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 e8       	ldi	r20, 0x80	; 128
    3cc2:	5f e3       	ldi	r21, 0x3F	; 63
    3cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cc8:	88 23       	and	r24, r24
    3cca:	44 f4       	brge	.+16     	; 0x3cdc <main+0x1272>
		__ticks = 1;
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e5 5b       	subi	r30, 0xB5	; 181
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	80 83       	st	Z, r24
    3cda:	64 c0       	rjmp	.+200    	; 0x3da4 <main+0x133a>
	else if (__tmp > 65535)
    3cdc:	fe 01       	movw	r30, r28
    3cde:	e3 5b       	subi	r30, 0xB3	; 179
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	60 81       	ld	r22, Z
    3ce4:	71 81       	ldd	r23, Z+1	; 0x01
    3ce6:	82 81       	ldd	r24, Z+2	; 0x02
    3ce8:	93 81       	ldd	r25, Z+3	; 0x03
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	3f ef       	ldi	r19, 0xFF	; 255
    3cee:	4f e7       	ldi	r20, 0x7F	; 127
    3cf0:	57 e4       	ldi	r21, 0x47	; 71
    3cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cf6:	18 16       	cp	r1, r24
    3cf8:	0c f0       	brlt	.+2      	; 0x3cfc <main+0x1292>
    3cfa:	43 c0       	rjmp	.+134    	; 0x3d82 <main+0x1318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	ef 5a       	subi	r30, 0xAF	; 175
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	60 81       	ld	r22, Z
    3d04:	71 81       	ldd	r23, Z+1	; 0x01
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	93 81       	ldd	r25, Z+3	; 0x03
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e2       	ldi	r20, 0x20	; 32
    3d10:	51 e4       	ldi	r21, 0x41	; 65
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	8e 01       	movw	r16, r28
    3d1c:	05 5b       	subi	r16, 0xB5	; 181
    3d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	f8 01       	movw	r30, r16
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	80 83       	st	Z, r24
    3d32:	1f c0       	rjmp	.+62     	; 0x3d72 <main+0x1308>
    3d34:	fe 01       	movw	r30, r28
    3d36:	e7 5b       	subi	r30, 0xB7	; 183
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	88 ec       	ldi	r24, 0xC8	; 200
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
    3d42:	fe 01       	movw	r30, r28
    3d44:	e7 5b       	subi	r30, 0xB7	; 183
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 81       	ld	r24, Z
    3d4a:	91 81       	ldd	r25, Z+1	; 0x01
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <main+0x12e2>
    3d50:	fe 01       	movw	r30, r28
    3d52:	e7 5b       	subi	r30, 0xB7	; 183
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	91 83       	std	Z+1, r25	; 0x01
    3d58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5a:	de 01       	movw	r26, r28
    3d5c:	a5 5b       	subi	r26, 0xB5	; 181
    3d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d60:	fe 01       	movw	r30, r28
    3d62:	e5 5b       	subi	r30, 0xB5	; 181
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	11 96       	adiw	r26, 0x01	; 1
    3d6e:	9c 93       	st	X, r25
    3d70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d72:	fe 01       	movw	r30, r28
    3d74:	e5 5b       	subi	r30, 0xB5	; 181
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	91 81       	ldd	r25, Z+1	; 0x01
    3d7c:	00 97       	sbiw	r24, 0x00	; 0
    3d7e:	d1 f6       	brne	.-76     	; 0x3d34 <main+0x12ca>
    3d80:	28 c0       	rjmp	.+80     	; 0x3dd2 <main+0x1368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d82:	8e 01       	movw	r16, r28
    3d84:	05 5b       	subi	r16, 0xB5	; 181
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 5b       	subi	r30, 0xB3	; 179
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	f8 01       	movw	r30, r16
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
    3da4:	de 01       	movw	r26, r28
    3da6:	a9 5b       	subi	r26, 0xB9	; 185
    3da8:	bf 4f       	sbci	r27, 0xFF	; 255
    3daa:	fe 01       	movw	r30, r28
    3dac:	e5 5b       	subi	r30, 0xB5	; 181
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 81       	ld	r24, Z
    3db2:	91 81       	ldd	r25, Z+1	; 0x01
    3db4:	11 96       	adiw	r26, 0x01	; 1
    3db6:	9c 93       	st	X, r25
    3db8:	8e 93       	st	-X, r24
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e9 5b       	subi	r30, 0xB9	; 185
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 81       	ld	r24, Z
    3dc2:	91 81       	ldd	r25, Z+1	; 0x01
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <main+0x135a>
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e9 5b       	subi	r30, 0xB9	; 185
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24


					    	 case '2' :
					    		 _delay_ms(500);
					    		 status =  Light ;
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	e9 51       	subi	r30, 0x19	; 25
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	85 e0       	ldi	r24, 0x05	; 5
    3dda:	80 83       	st	Z, r24
    3ddc:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>
		                 /***************AC status and temperature****************************/
					    	case A_C :



					    		temperatue ="28";// SPI_ui8TransmitRecive(AC_Riquest);
    3de0:	fe 01       	movw	r30, r28
    3de2:	ec 51       	subi	r30, 0x1C	; 28
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	8b e0       	ldi	r24, 0x0B	; 11
    3de8:	91 e0       	ldi	r25, 0x01	; 1
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24


					    	//i++;
					    		LCD_clearscreen();
    3dee:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>

					    		LCD_movecursor(1,1);
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					            LCD_vSend_string("T=");
    3dfa:	8e e0       	ldi	r24, 0x0E	; 14
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					            if(t==0){
    3e02:	fe 01       	movw	r30, r28
    3e04:	ed 51       	subi	r30, 0x1D	; 29
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	80 81       	ld	r24, Z
    3e0a:	88 23       	and	r24, r24
    3e0c:	89 f4       	brne	.+34     	; 0x3e30 <main+0x13c6>
					            LCD_vSend_string(temperatue);
    3e0e:	fe 01       	movw	r30, r28
    3e10:	ec 51       	subi	r30, 0x1C	; 28
    3e12:	ff 4f       	sbci	r31, 0xFF	; 255
    3e14:	80 81       	ld	r24, Z
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					            t++;
    3e1c:	de 01       	movw	r26, r28
    3e1e:	ad 51       	subi	r26, 0x1D	; 29
    3e20:	bf 4f       	sbci	r27, 0xFF	; 255
    3e22:	fe 01       	movw	r30, r28
    3e24:	ed 51       	subi	r30, 0x1D	; 29
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 81       	ld	r24, Z
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	8c 93       	st	X, r24
    3e2e:	08 c0       	rjmp	.+16     	; 0x3e40 <main+0x13d6>
					            }
					            else{
					            	 LCD_vSend_string("31");
    3e30:	81 e1       	ldi	r24, 0x11	; 17
    3e32:	91 e0       	ldi	r25, 0x01	; 1
    3e34:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					            	 t=0;
    3e38:	fe 01       	movw	r30, r28
    3e3a:	ed 51       	subi	r30, 0x1D	; 29
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	10 82       	st	Z, r1
		//			    				LCD_vSend_char('c');
		//			    				_delay_ms(500);



					    		LCD_movecursor(1,8);
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	68 e0       	ldi	r22, 0x08	; 8
    3e44:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    		LCD_vSend_string("AC:");
    3e48:	84 e1       	ldi	r24, 0x14	; 20
    3e4a:	91 e0       	ldi	r25, 0x01	; 1
    3e4c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>

					    		switch(DIO_u8read('B',4))
    3e50:	82 e4       	ldi	r24, 0x42	; 66
    3e52:	64 e0       	ldi	r22, 0x04	; 4
    3e54:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8read>
    3e58:	28 2f       	mov	r18, r24
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	cb 50       	subi	r28, 0x0B	; 11
    3e5e:	df 4f       	sbci	r29, 0xFF	; 255
    3e60:	39 83       	std	Y+1, r19	; 0x01
    3e62:	28 83       	st	Y, r18
    3e64:	c5 5f       	subi	r28, 0xF5	; 245
    3e66:	d0 40       	sbci	r29, 0x00	; 0
    3e68:	cb 50       	subi	r28, 0x0B	; 11
    3e6a:	df 4f       	sbci	r29, 0xFF	; 255
    3e6c:	88 81       	ld	r24, Y
    3e6e:	99 81       	ldd	r25, Y+1	; 0x01
    3e70:	c5 5f       	subi	r28, 0xF5	; 245
    3e72:	d0 40       	sbci	r29, 0x00	; 0
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	71 f0       	breq	.+28     	; 0x3e94 <main+0x142a>
    3e78:	cb 50       	subi	r28, 0x0B	; 11
    3e7a:	df 4f       	sbci	r29, 0xFF	; 255
    3e7c:	e8 81       	ld	r30, Y
    3e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e80:	c5 5f       	subi	r28, 0xF5	; 245
    3e82:	d0 40       	sbci	r29, 0x00	; 0
    3e84:	e1 30       	cpi	r30, 0x01	; 1
    3e86:	f1 05       	cpc	r31, r1
    3e88:	49 f4       	brne	.+18     	; 0x3e9c <main+0x1432>
					    		{
					    		case HIGH :
					    			LCD_vSend_string("ON(2)");
    3e8a:	88 e1       	ldi	r24, 0x18	; 24
    3e8c:	91 e0       	ldi	r25, 0x01	; 1
    3e8e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    3e92:	04 c0       	rjmp	.+8      	; 0x3e9c <main+0x1432>

					    			break;
					    		case LOW :
					    		    LCD_vSend_string("OFF(2)");
    3e94:	8e e1       	ldi	r24, 0x1E	; 30
    3e96:	91 e0       	ldi	r25, 0x01	; 1
    3e98:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					    		}




					    		LCD_movecursor(2,1);
    3e9c:	82 e0       	ldi	r24, 0x02	; 2
    3e9e:	61 e0       	ldi	r22, 0x01	; 1
    3ea0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    		 LCD_vSend_string("Back:(1)");
    3ea4:	85 e2       	ldi	r24, 0x25	; 37
    3ea6:	91 e0       	ldi	r25, 0x01	; 1
    3ea8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
					    		 LCD_movecursor(1,3);
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	63 e0       	ldi	r22, 0x03	; 3
    3eb0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    		 LCD_vSend_string("28");
    3eb4:	8b e0       	ldi	r24, 0x0B	; 11
    3eb6:	91 e0       	ldi	r25, 0x01	; 1
    3eb8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	ed 5b       	subi	r30, 0xBD	; 189
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	aa ef       	ldi	r26, 0xFA	; 250
    3ec8:	b3 e4       	ldi	r27, 0x43	; 67
    3eca:	80 83       	st	Z, r24
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	a2 83       	std	Z+2, r26	; 0x02
    3ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed2:	8e 01       	movw	r16, r28
    3ed4:	01 5c       	subi	r16, 0xC1	; 193
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	fe 01       	movw	r30, r28
    3eda:	ed 5b       	subi	r30, 0xBD	; 189
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	60 81       	ld	r22, Z
    3ee0:	71 81       	ldd	r23, Z+1	; 0x01
    3ee2:	82 81       	ldd	r24, Z+2	; 0x02
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	4a ef       	ldi	r20, 0xFA	; 250
    3eec:	54 e4       	ldi	r21, 0x44	; 68
    3eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	80 83       	st	Z, r24
    3efa:	91 83       	std	Z+1, r25	; 0x01
    3efc:	a2 83       	std	Z+2, r26	; 0x02
    3efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f00:	fe 01       	movw	r30, r28
    3f02:	ff 96       	adiw	r30, 0x3f	; 63
    3f04:	60 81       	ld	r22, Z
    3f06:	71 81       	ldd	r23, Z+1	; 0x01
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	93 81       	ldd	r25, Z+3	; 0x03
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e8       	ldi	r20, 0x80	; 128
    3f12:	5f e3       	ldi	r21, 0x3F	; 63
    3f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	2c f4       	brge	.+10     	; 0x3f26 <main+0x14bc>
		__ticks = 1;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9e af       	std	Y+62, r25	; 0x3e
    3f22:	8d af       	std	Y+61, r24	; 0x3d
    3f24:	46 c0       	rjmp	.+140    	; 0x3fb2 <main+0x1548>
	else if (__tmp > 65535)
    3f26:	fe 01       	movw	r30, r28
    3f28:	ff 96       	adiw	r30, 0x3f	; 63
    3f2a:	60 81       	ld	r22, Z
    3f2c:	71 81       	ldd	r23, Z+1	; 0x01
    3f2e:	82 81       	ldd	r24, Z+2	; 0x02
    3f30:	93 81       	ldd	r25, Z+3	; 0x03
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	3f ef       	ldi	r19, 0xFF	; 255
    3f36:	4f e7       	ldi	r20, 0x7F	; 127
    3f38:	57 e4       	ldi	r21, 0x47	; 71
    3f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f3e:	18 16       	cp	r1, r24
    3f40:	64 f5       	brge	.+88     	; 0x3f9a <main+0x1530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f42:	fe 01       	movw	r30, r28
    3f44:	ed 5b       	subi	r30, 0xBD	; 189
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e2       	ldi	r20, 0x20	; 32
    3f56:	51 e4       	ldi	r21, 0x41	; 65
    3f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	9e af       	std	Y+62, r25	; 0x3e
    3f6e:	8d af       	std	Y+61, r24	; 0x3d
    3f70:	0f c0       	rjmp	.+30     	; 0x3f90 <main+0x1526>
    3f72:	88 ec       	ldi	r24, 0xC8	; 200
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	9c af       	std	Y+60, r25	; 0x3c
    3f78:	8b af       	std	Y+59, r24	; 0x3b
    3f7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	f1 f7       	brne	.-4      	; 0x3f7e <main+0x1514>
    3f82:	9c af       	std	Y+60, r25	; 0x3c
    3f84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f86:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f88:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	9e af       	std	Y+62, r25	; 0x3e
    3f8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f90:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f92:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f94:	00 97       	sbiw	r24, 0x00	; 0
    3f96:	69 f7       	brne	.-38     	; 0x3f72 <main+0x1508>
    3f98:	16 c0       	rjmp	.+44     	; 0x3fc6 <main+0x155c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	ff 96       	adiw	r30, 0x3f	; 63
    3f9e:	60 81       	ld	r22, Z
    3fa0:	71 81       	ldd	r23, Z+1	; 0x01
    3fa2:	82 81       	ldd	r24, Z+2	; 0x02
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	9e af       	std	Y+62, r25	; 0x3e
    3fb0:	8d af       	std	Y+61, r24	; 0x3d
    3fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fb6:	9a af       	std	Y+58, r25	; 0x3a
    3fb8:	89 af       	std	Y+57, r24	; 0x39
    3fba:	89 ad       	ldd	r24, Y+57	; 0x39
    3fbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <main+0x1554>
    3fc2:	9a af       	std	Y+58, r25	; 0x3a
    3fc4:	89 af       	std	Y+57, r24	; 0x39
					    		 					    		    					    			_delay_ms(500);
					    		 					    		    					    			LCD_movecursor(1,3);
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	63 e0       	ldi	r22, 0x03	; 3
    3fca:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    		 					    		    					    			LCD_vSend_string("30");
    3fce:	8e e2       	ldi	r24, 0x2E	; 46
    3fd0:	91 e0       	ldi	r25, 0x01	; 1
    3fd2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	aa ef       	ldi	r26, 0xFA	; 250
    3fdc:	b3 e4       	ldi	r27, 0x43	; 67
    3fde:	8d ab       	std	Y+53, r24	; 0x35
    3fe0:	9e ab       	std	Y+54, r25	; 0x36
    3fe2:	af ab       	std	Y+55, r26	; 0x37
    3fe4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    3fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    3fea:	8f a9       	ldd	r24, Y+55	; 0x37
    3fec:	98 ad       	ldd	r25, Y+56	; 0x38
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	4a ef       	ldi	r20, 0xFA	; 250
    3ff4:	54 e4       	ldi	r21, 0x44	; 68
    3ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	89 ab       	std	Y+49, r24	; 0x31
    4000:	9a ab       	std	Y+50, r25	; 0x32
    4002:	ab ab       	std	Y+51, r26	; 0x33
    4004:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4006:	69 a9       	ldd	r22, Y+49	; 0x31
    4008:	7a a9       	ldd	r23, Y+50	; 0x32
    400a:	8b a9       	ldd	r24, Y+51	; 0x33
    400c:	9c a9       	ldd	r25, Y+52	; 0x34
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	40 e8       	ldi	r20, 0x80	; 128
    4014:	5f e3       	ldi	r21, 0x3F	; 63
    4016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    401a:	88 23       	and	r24, r24
    401c:	2c f4       	brge	.+10     	; 0x4028 <main+0x15be>
		__ticks = 1;
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	98 ab       	std	Y+48, r25	; 0x30
    4024:	8f a7       	std	Y+47, r24	; 0x2f
    4026:	3f c0       	rjmp	.+126    	; 0x40a6 <main+0x163c>
	else if (__tmp > 65535)
    4028:	69 a9       	ldd	r22, Y+49	; 0x31
    402a:	7a a9       	ldd	r23, Y+50	; 0x32
    402c:	8b a9       	ldd	r24, Y+51	; 0x33
    402e:	9c a9       	ldd	r25, Y+52	; 0x34
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	3f ef       	ldi	r19, 0xFF	; 255
    4034:	4f e7       	ldi	r20, 0x7F	; 127
    4036:	57 e4       	ldi	r21, 0x47	; 71
    4038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    403c:	18 16       	cp	r1, r24
    403e:	4c f5       	brge	.+82     	; 0x4092 <main+0x1628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4040:	6d a9       	ldd	r22, Y+53	; 0x35
    4042:	7e a9       	ldd	r23, Y+54	; 0x36
    4044:	8f a9       	ldd	r24, Y+55	; 0x37
    4046:	98 ad       	ldd	r25, Y+56	; 0x38
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 e2       	ldi	r20, 0x20	; 32
    404e:	51 e4       	ldi	r21, 0x41	; 65
    4050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	bc 01       	movw	r22, r24
    405a:	cd 01       	movw	r24, r26
    405c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	98 ab       	std	Y+48, r25	; 0x30
    4066:	8f a7       	std	Y+47, r24	; 0x2f
    4068:	0f c0       	rjmp	.+30     	; 0x4088 <main+0x161e>
    406a:	88 ec       	ldi	r24, 0xC8	; 200
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	9e a7       	std	Y+46, r25	; 0x2e
    4070:	8d a7       	std	Y+45, r24	; 0x2d
    4072:	8d a5       	ldd	r24, Y+45	; 0x2d
    4074:	9e a5       	ldd	r25, Y+46	; 0x2e
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	f1 f7       	brne	.-4      	; 0x4076 <main+0x160c>
    407a:	9e a7       	std	Y+46, r25	; 0x2e
    407c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    407e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4080:	98 a9       	ldd	r25, Y+48	; 0x30
    4082:	01 97       	sbiw	r24, 0x01	; 1
    4084:	98 ab       	std	Y+48, r25	; 0x30
    4086:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4088:	8f a5       	ldd	r24, Y+47	; 0x2f
    408a:	98 a9       	ldd	r25, Y+48	; 0x30
    408c:	00 97       	sbiw	r24, 0x00	; 0
    408e:	69 f7       	brne	.-38     	; 0x406a <main+0x1600>
    4090:	14 c0       	rjmp	.+40     	; 0x40ba <main+0x1650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4092:	69 a9       	ldd	r22, Y+49	; 0x31
    4094:	7a a9       	ldd	r23, Y+50	; 0x32
    4096:	8b a9       	ldd	r24, Y+51	; 0x33
    4098:	9c a9       	ldd	r25, Y+52	; 0x34
    409a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	98 ab       	std	Y+48, r25	; 0x30
    40a4:	8f a7       	std	Y+47, r24	; 0x2f
    40a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40a8:	98 a9       	ldd	r25, Y+48	; 0x30
    40aa:	9c a7       	std	Y+44, r25	; 0x2c
    40ac:	8b a7       	std	Y+43, r24	; 0x2b
    40ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    40b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	f1 f7       	brne	.-4      	; 0x40b2 <main+0x1648>
    40b6:	9c a7       	std	Y+44, r25	; 0x2c
    40b8:	8b a7       	std	Y+43, r24	; 0x2b
					    		 					    		    					    			_delay_ms(500);
					    		 					    		    					    			LCD_movecursor(1,3);
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	63 e0       	ldi	r22, 0x03	; 3
    40be:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    		 					    		    		    		   			LCD_vSend_string("31");
    40c2:	81 e1       	ldi	r24, 0x11	; 17
    40c4:	91 e0       	ldi	r25, 0x01	; 1
    40c6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	aa ef       	ldi	r26, 0xFA	; 250
    40d0:	b3 e4       	ldi	r27, 0x43	; 67
    40d2:	8f a3       	std	Y+39, r24	; 0x27
    40d4:	98 a7       	std	Y+40, r25	; 0x28
    40d6:	a9 a7       	std	Y+41, r26	; 0x29
    40d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40da:	6f a1       	ldd	r22, Y+39	; 0x27
    40dc:	78 a5       	ldd	r23, Y+40	; 0x28
    40de:	89 a5       	ldd	r24, Y+41	; 0x29
    40e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	4a ef       	ldi	r20, 0xFA	; 250
    40e8:	54 e4       	ldi	r21, 0x44	; 68
    40ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	8b a3       	std	Y+35, r24	; 0x23
    40f4:	9c a3       	std	Y+36, r25	; 0x24
    40f6:	ad a3       	std	Y+37, r26	; 0x25
    40f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40fa:	6b a1       	ldd	r22, Y+35	; 0x23
    40fc:	7c a1       	ldd	r23, Y+36	; 0x24
    40fe:	8d a1       	ldd	r24, Y+37	; 0x25
    4100:	9e a1       	ldd	r25, Y+38	; 0x26
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e8       	ldi	r20, 0x80	; 128
    4108:	5f e3       	ldi	r21, 0x3F	; 63
    410a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    410e:	88 23       	and	r24, r24
    4110:	2c f4       	brge	.+10     	; 0x411c <main+0x16b2>
		__ticks = 1;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	9a a3       	std	Y+34, r25	; 0x22
    4118:	89 a3       	std	Y+33, r24	; 0x21
    411a:	3f c0       	rjmp	.+126    	; 0x419a <main+0x1730>
	else if (__tmp > 65535)
    411c:	6b a1       	ldd	r22, Y+35	; 0x23
    411e:	7c a1       	ldd	r23, Y+36	; 0x24
    4120:	8d a1       	ldd	r24, Y+37	; 0x25
    4122:	9e a1       	ldd	r25, Y+38	; 0x26
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	3f ef       	ldi	r19, 0xFF	; 255
    4128:	4f e7       	ldi	r20, 0x7F	; 127
    412a:	57 e4       	ldi	r21, 0x47	; 71
    412c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4130:	18 16       	cp	r1, r24
    4132:	4c f5       	brge	.+82     	; 0x4186 <main+0x171c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4134:	6f a1       	ldd	r22, Y+39	; 0x27
    4136:	78 a5       	ldd	r23, Y+40	; 0x28
    4138:	89 a5       	ldd	r24, Y+41	; 0x29
    413a:	9a a5       	ldd	r25, Y+42	; 0x2a
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e2       	ldi	r20, 0x20	; 32
    4142:	51 e4       	ldi	r21, 0x41	; 65
    4144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	bc 01       	movw	r22, r24
    414e:	cd 01       	movw	r24, r26
    4150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	9a a3       	std	Y+34, r25	; 0x22
    415a:	89 a3       	std	Y+33, r24	; 0x21
    415c:	0f c0       	rjmp	.+30     	; 0x417c <main+0x1712>
    415e:	88 ec       	ldi	r24, 0xC8	; 200
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	98 a3       	std	Y+32, r25	; 0x20
    4164:	8f 8f       	std	Y+31, r24	; 0x1f
    4166:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4168:	98 a1       	ldd	r25, Y+32	; 0x20
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	f1 f7       	brne	.-4      	; 0x416a <main+0x1700>
    416e:	98 a3       	std	Y+32, r25	; 0x20
    4170:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4172:	89 a1       	ldd	r24, Y+33	; 0x21
    4174:	9a a1       	ldd	r25, Y+34	; 0x22
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	9a a3       	std	Y+34, r25	; 0x22
    417a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417c:	89 a1       	ldd	r24, Y+33	; 0x21
    417e:	9a a1       	ldd	r25, Y+34	; 0x22
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	69 f7       	brne	.-38     	; 0x415e <main+0x16f4>
    4184:	14 c0       	rjmp	.+40     	; 0x41ae <main+0x1744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4186:	6b a1       	ldd	r22, Y+35	; 0x23
    4188:	7c a1       	ldd	r23, Y+36	; 0x24
    418a:	8d a1       	ldd	r24, Y+37	; 0x25
    418c:	9e a1       	ldd	r25, Y+38	; 0x26
    418e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	9a a3       	std	Y+34, r25	; 0x22
    4198:	89 a3       	std	Y+33, r24	; 0x21
    419a:	89 a1       	ldd	r24, Y+33	; 0x21
    419c:	9a a1       	ldd	r25, Y+34	; 0x22
    419e:	9e 8f       	std	Y+30, r25	; 0x1e
    41a0:	8d 8f       	std	Y+29, r24	; 0x1d
    41a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	f1 f7       	brne	.-4      	; 0x41a6 <main+0x173c>
    41aa:	9e 8f       	std	Y+30, r25	; 0x1e
    41ac:	8d 8f       	std	Y+29, r24	; 0x1d
					    		 					    		    		    		   			_delay_ms(500);
					    		 					    		    		    		   			LCD_movecursor(1,3);
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	63 e0       	ldi	r22, 0x03	; 3
    41b2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    		 					    		    		    		   			LCD_vSend_string("30");
    41b6:	8e e2       	ldi	r24, 0x2E	; 46
    41b8:	91 e0       	ldi	r25, 0x01	; 1
    41ba:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	aa ef       	ldi	r26, 0xFA	; 250
    41c4:	b3 e4       	ldi	r27, 0x43	; 67
    41c6:	89 8f       	std	Y+25, r24	; 0x19
    41c8:	9a 8f       	std	Y+26, r25	; 0x1a
    41ca:	ab 8f       	std	Y+27, r26	; 0x1b
    41cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ce:	69 8d       	ldd	r22, Y+25	; 0x19
    41d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	4a ef       	ldi	r20, 0xFA	; 250
    41dc:	54 e4       	ldi	r21, 0x44	; 68
    41de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	8d 8b       	std	Y+21, r24	; 0x15
    41e8:	9e 8b       	std	Y+22, r25	; 0x16
    41ea:	af 8b       	std	Y+23, r26	; 0x17
    41ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41ee:	6d 89       	ldd	r22, Y+21	; 0x15
    41f0:	7e 89       	ldd	r23, Y+22	; 0x16
    41f2:	8f 89       	ldd	r24, Y+23	; 0x17
    41f4:	98 8d       	ldd	r25, Y+24	; 0x18
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	40 e8       	ldi	r20, 0x80	; 128
    41fc:	5f e3       	ldi	r21, 0x3F	; 63
    41fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4202:	88 23       	and	r24, r24
    4204:	2c f4       	brge	.+10     	; 0x4210 <main+0x17a6>
		__ticks = 1;
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9c 8b       	std	Y+20, r25	; 0x14
    420c:	8b 8b       	std	Y+19, r24	; 0x13
    420e:	3f c0       	rjmp	.+126    	; 0x428e <main+0x1824>
	else if (__tmp > 65535)
    4210:	6d 89       	ldd	r22, Y+21	; 0x15
    4212:	7e 89       	ldd	r23, Y+22	; 0x16
    4214:	8f 89       	ldd	r24, Y+23	; 0x17
    4216:	98 8d       	ldd	r25, Y+24	; 0x18
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	3f ef       	ldi	r19, 0xFF	; 255
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	57 e4       	ldi	r21, 0x47	; 71
    4220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	4c f5       	brge	.+82     	; 0x427a <main+0x1810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4228:	69 8d       	ldd	r22, Y+25	; 0x19
    422a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    422c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    422e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e2       	ldi	r20, 0x20	; 32
    4236:	51 e4       	ldi	r21, 0x41	; 65
    4238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	bc 01       	movw	r22, r24
    4242:	cd 01       	movw	r24, r26
    4244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	9c 8b       	std	Y+20, r25	; 0x14
    424e:	8b 8b       	std	Y+19, r24	; 0x13
    4250:	0f c0       	rjmp	.+30     	; 0x4270 <main+0x1806>
    4252:	88 ec       	ldi	r24, 0xC8	; 200
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	9a 8b       	std	Y+18, r25	; 0x12
    4258:	89 8b       	std	Y+17, r24	; 0x11
    425a:	89 89       	ldd	r24, Y+17	; 0x11
    425c:	9a 89       	ldd	r25, Y+18	; 0x12
    425e:	01 97       	sbiw	r24, 0x01	; 1
    4260:	f1 f7       	brne	.-4      	; 0x425e <main+0x17f4>
    4262:	9a 8b       	std	Y+18, r25	; 0x12
    4264:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4266:	8b 89       	ldd	r24, Y+19	; 0x13
    4268:	9c 89       	ldd	r25, Y+20	; 0x14
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	9c 8b       	std	Y+20, r25	; 0x14
    426e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4270:	8b 89       	ldd	r24, Y+19	; 0x13
    4272:	9c 89       	ldd	r25, Y+20	; 0x14
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	69 f7       	brne	.-38     	; 0x4252 <main+0x17e8>
    4278:	14 c0       	rjmp	.+40     	; 0x42a2 <main+0x1838>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427a:	6d 89       	ldd	r22, Y+21	; 0x15
    427c:	7e 89       	ldd	r23, Y+22	; 0x16
    427e:	8f 89       	ldd	r24, Y+23	; 0x17
    4280:	98 8d       	ldd	r25, Y+24	; 0x18
    4282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	9c 8b       	std	Y+20, r25	; 0x14
    428c:	8b 8b       	std	Y+19, r24	; 0x13
    428e:	8b 89       	ldd	r24, Y+19	; 0x13
    4290:	9c 89       	ldd	r25, Y+20	; 0x14
    4292:	98 8b       	std	Y+16, r25	; 0x10
    4294:	8f 87       	std	Y+15, r24	; 0x0f
    4296:	8f 85       	ldd	r24, Y+15	; 0x0f
    4298:	98 89       	ldd	r25, Y+16	; 0x10
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	f1 f7       	brne	.-4      	; 0x429a <main+0x1830>
    429e:	98 8b       	std	Y+16, r25	; 0x10
    42a0:	8f 87       	std	Y+15, r24	; 0x0f
					    		 					    		    		    		   			_delay_ms(500);
					    		 					    		    		    		   			LCD_movecursor(1,3);
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	63 e0       	ldi	r22, 0x03	; 3
    42a6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
					    		 					    		    		    		   			LCD_vSend_string("29");
    42aa:	81 e3       	ldi	r24, 0x31	; 49
    42ac:	91 e0       	ldi	r25, 0x01	; 1
    42ae:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
    42b2:	80 e0       	ldi	r24, 0x00	; 0
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	aa ef       	ldi	r26, 0xFA	; 250
    42b8:	b3 e4       	ldi	r27, 0x43	; 67
    42ba:	8b 87       	std	Y+11, r24	; 0x0b
    42bc:	9c 87       	std	Y+12, r25	; 0x0c
    42be:	ad 87       	std	Y+13, r26	; 0x0d
    42c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	4a ef       	ldi	r20, 0xFA	; 250
    42d0:	54 e4       	ldi	r21, 0x44	; 68
    42d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	8f 83       	std	Y+7, r24	; 0x07
    42dc:	98 87       	std	Y+8, r25	; 0x08
    42de:	a9 87       	std	Y+9, r26	; 0x09
    42e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42e2:	6f 81       	ldd	r22, Y+7	; 0x07
    42e4:	78 85       	ldd	r23, Y+8	; 0x08
    42e6:	89 85       	ldd	r24, Y+9	; 0x09
    42e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e8       	ldi	r20, 0x80	; 128
    42f0:	5f e3       	ldi	r21, 0x3F	; 63
    42f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42f6:	88 23       	and	r24, r24
    42f8:	2c f4       	brge	.+10     	; 0x4304 <main+0x189a>
		__ticks = 1;
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	9e 83       	std	Y+6, r25	; 0x06
    4300:	8d 83       	std	Y+5, r24	; 0x05
    4302:	3f c0       	rjmp	.+126    	; 0x4382 <main+0x1918>
	else if (__tmp > 65535)
    4304:	6f 81       	ldd	r22, Y+7	; 0x07
    4306:	78 85       	ldd	r23, Y+8	; 0x08
    4308:	89 85       	ldd	r24, Y+9	; 0x09
    430a:	9a 85       	ldd	r25, Y+10	; 0x0a
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	3f ef       	ldi	r19, 0xFF	; 255
    4310:	4f e7       	ldi	r20, 0x7F	; 127
    4312:	57 e4       	ldi	r21, 0x47	; 71
    4314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4318:	18 16       	cp	r1, r24
    431a:	4c f5       	brge	.+82     	; 0x436e <main+0x1904>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    431c:	6b 85       	ldd	r22, Y+11	; 0x0b
    431e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4320:	8d 85       	ldd	r24, Y+13	; 0x0d
    4322:	9e 85       	ldd	r25, Y+14	; 0x0e
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 e2       	ldi	r20, 0x20	; 32
    432a:	51 e4       	ldi	r21, 0x41	; 65
    432c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	bc 01       	movw	r22, r24
    4336:	cd 01       	movw	r24, r26
    4338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	9e 83       	std	Y+6, r25	; 0x06
    4342:	8d 83       	std	Y+5, r24	; 0x05
    4344:	0f c0       	rjmp	.+30     	; 0x4364 <main+0x18fa>
    4346:	88 ec       	ldi	r24, 0xC8	; 200
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	9c 83       	std	Y+4, r25	; 0x04
    434c:	8b 83       	std	Y+3, r24	; 0x03
    434e:	8b 81       	ldd	r24, Y+3	; 0x03
    4350:	9c 81       	ldd	r25, Y+4	; 0x04
    4352:	01 97       	sbiw	r24, 0x01	; 1
    4354:	f1 f7       	brne	.-4      	; 0x4352 <main+0x18e8>
    4356:	9c 83       	std	Y+4, r25	; 0x04
    4358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    435a:	8d 81       	ldd	r24, Y+5	; 0x05
    435c:	9e 81       	ldd	r25, Y+6	; 0x06
    435e:	01 97       	sbiw	r24, 0x01	; 1
    4360:	9e 83       	std	Y+6, r25	; 0x06
    4362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4364:	8d 81       	ldd	r24, Y+5	; 0x05
    4366:	9e 81       	ldd	r25, Y+6	; 0x06
    4368:	00 97       	sbiw	r24, 0x00	; 0
    436a:	69 f7       	brne	.-38     	; 0x4346 <main+0x18dc>
    436c:	14 c0       	rjmp	.+40     	; 0x4396 <main+0x192c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    436e:	6f 81       	ldd	r22, Y+7	; 0x07
    4370:	78 85       	ldd	r23, Y+8	; 0x08
    4372:	89 85       	ldd	r24, Y+9	; 0x09
    4374:	9a 85       	ldd	r25, Y+10	; 0x0a
    4376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	9e 83       	std	Y+6, r25	; 0x06
    4380:	8d 83       	std	Y+5, r24	; 0x05
    4382:	8d 81       	ldd	r24, Y+5	; 0x05
    4384:	9e 81       	ldd	r25, Y+6	; 0x06
    4386:	9a 83       	std	Y+2, r25	; 0x02
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	9a 81       	ldd	r25, Y+2	; 0x02
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <main+0x1924>
    4392:	9a 83       	std	Y+2, r25	; 0x02
    4394:	89 83       	std	Y+1, r24	; 0x01
					    		 					    		    		    		   			_delay_ms(500);
					    		 R_PC=UART_u8ReceiveData();
    4396:	0e 94 88 14 	call	0x2910	; 0x2910 <UART_u8ReceiveData>
    439a:	fe 01       	movw	r30, r28
    439c:	e8 51       	subi	r30, 0x18	; 24
    439e:	ff 4f       	sbci	r31, 0xFF	; 255
    43a0:	80 83       	st	Z, r24
		                        switch(R_PC)
    43a2:	fe 01       	movw	r30, r28
    43a4:	e8 51       	subi	r30, 0x18	; 24
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	80 81       	ld	r24, Z
    43aa:	28 2f       	mov	r18, r24
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	cd 50       	subi	r28, 0x0D	; 13
    43b0:	df 4f       	sbci	r29, 0xFF	; 255
    43b2:	39 83       	std	Y+1, r19	; 0x01
    43b4:	28 83       	st	Y, r18
    43b6:	c3 5f       	subi	r28, 0xF3	; 243
    43b8:	d0 40       	sbci	r29, 0x00	; 0
    43ba:	cd 50       	subi	r28, 0x0D	; 13
    43bc:	df 4f       	sbci	r29, 0xFF	; 255
    43be:	88 81       	ld	r24, Y
    43c0:	99 81       	ldd	r25, Y+1	; 0x01
    43c2:	c3 5f       	subi	r28, 0xF3	; 243
    43c4:	d0 40       	sbci	r29, 0x00	; 0
    43c6:	81 33       	cpi	r24, 0x31	; 49
    43c8:	91 05       	cpc	r25, r1
    43ca:	59 f0       	breq	.+22     	; 0x43e2 <main+0x1978>
    43cc:	cd 50       	subi	r28, 0x0D	; 13
    43ce:	df 4f       	sbci	r29, 0xFF	; 255
    43d0:	e8 81       	ld	r30, Y
    43d2:	f9 81       	ldd	r31, Y+1	; 0x01
    43d4:	c3 5f       	subi	r28, 0xF3	; 243
    43d6:	d0 40       	sbci	r29, 0x00	; 0
    43d8:	e2 33       	cpi	r30, 0x32	; 50
    43da:	f1 05       	cpc	r31, r1
    43dc:	49 f0       	breq	.+18     	; 0x43f0 <main+0x1986>
    43de:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>
		                        {
		                        case '1' :
		                        	status = Main_menue ;
    43e2:	fe 01       	movw	r30, r28
    43e4:	e9 51       	subi	r30, 0x19	; 25
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	83 e0       	ldi	r24, 0x03	; 3
    43ea:	80 83       	st	Z, r24
    43ec:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>
		                        break;
		                        case '2' :
		                             DIO_toggle('B',4) ;
    43f0:	82 e4       	ldi	r24, 0x42	; 66
    43f2:	64 e0       	ldi	r22, 0x04	; 4
    43f4:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_toggle>
    43f8:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>

		                        break ;


		                        case Light :
		                        	LCD_clearscreen();
    43fc:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_clearscreen>
		                        	LCD_movecursor(1,1);
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	61 e0       	ldi	r22, 0x01	; 1
    4404:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
		                        	LCD_vSend_string("Status:");
    4408:	84 e3       	ldi	r24, 0x34	; 52
    440a:	91 e0       	ldi	r25, 0x01	; 1
    440c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
		                        	if(l==0)
    4410:	fe 01       	movw	r30, r28
    4412:	ee 51       	subi	r30, 0x1E	; 30
    4414:	ff 4f       	sbci	r31, 0xFF	; 255
    4416:	80 81       	ld	r24, Z
    4418:	88 23       	and	r24, r24
    441a:	71 f4       	brne	.+28     	; 0x4438 <main+0x19ce>
		                        	{
		                        		LCD_vSend_string("OFF");
    441c:	8c e3       	ldi	r24, 0x3C	; 60
    441e:	91 e0       	ldi	r25, 0x01	; 1
    4420:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
		                        		l++;
    4424:	de 01       	movw	r26, r28
    4426:	ae 51       	subi	r26, 0x1E	; 30
    4428:	bf 4f       	sbci	r27, 0xFF	; 255
    442a:	fe 01       	movw	r30, r28
    442c:	ee 51       	subi	r30, 0x1E	; 30
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	80 81       	ld	r24, Z
    4432:	8f 5f       	subi	r24, 0xFF	; 255
    4434:	8c 93       	st	X, r24
    4436:	08 c0       	rjmp	.+16     	; 0x4448 <main+0x19de>
		                        	}	else
		                        	{
		                        		LCD_vSend_string("ON");
    4438:	80 e4       	ldi	r24, 0x40	; 64
    443a:	91 e0       	ldi	r25, 0x01	; 1
    443c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
		                        		l=0;
    4440:	fe 01       	movw	r30, r28
    4442:	ee 51       	subi	r30, 0x1E	; 30
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	10 82       	st	Z, r1
		                        	}


		                        	LCD_movecursor(2,1);
    4448:	82 e0       	ldi	r24, 0x02	; 2
    444a:	61 e0       	ldi	r22, 0x01	; 1
    444c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_movecursor>
		                        	LCD_vSend_string("Back:(1) Tog:(2)");
    4450:	83 e4       	ldi	r24, 0x43	; 67
    4452:	91 e0       	ldi	r25, 0x01	; 1
    4454:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_vSend_string>
		                        	R_PC=UART_u8ReceiveData();
    4458:	0e 94 88 14 	call	0x2910	; 0x2910 <UART_u8ReceiveData>
    445c:	fe 01       	movw	r30, r28
    445e:	e8 51       	subi	r30, 0x18	; 24
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	80 83       	st	Z, r24
		                        	switch(R_PC)
    4464:	fe 01       	movw	r30, r28
    4466:	e8 51       	subi	r30, 0x18	; 24
    4468:	ff 4f       	sbci	r31, 0xFF	; 255
    446a:	80 81       	ld	r24, Z
    446c:	28 2f       	mov	r18, r24
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	cf 50       	subi	r28, 0x0F	; 15
    4472:	df 4f       	sbci	r29, 0xFF	; 255
    4474:	39 83       	std	Y+1, r19	; 0x01
    4476:	28 83       	st	Y, r18
    4478:	c1 5f       	subi	r28, 0xF1	; 241
    447a:	d0 40       	sbci	r29, 0x00	; 0
    447c:	cf 50       	subi	r28, 0x0F	; 15
    447e:	df 4f       	sbci	r29, 0xFF	; 255
    4480:	88 81       	ld	r24, Y
    4482:	99 81       	ldd	r25, Y+1	; 0x01
    4484:	c1 5f       	subi	r28, 0xF1	; 241
    4486:	d0 40       	sbci	r29, 0x00	; 0
    4488:	81 33       	cpi	r24, 0x31	; 49
    448a:	91 05       	cpc	r25, r1
    448c:	59 f0       	breq	.+22     	; 0x44a4 <main+0x1a3a>
    448e:	cf 50       	subi	r28, 0x0F	; 15
    4490:	df 4f       	sbci	r29, 0xFF	; 255
    4492:	e8 81       	ld	r30, Y
    4494:	f9 81       	ldd	r31, Y+1	; 0x01
    4496:	c1 5f       	subi	r28, 0xF1	; 241
    4498:	d0 40       	sbci	r29, 0x00	; 0
    449a:	e2 33       	cpi	r30, 0x32	; 50
    449c:	f1 05       	cpc	r31, r1
    449e:	49 f0       	breq	.+18     	; 0x44b2 <main+0x1a48>
    44a0:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>
		                        	 {
		                        	  case '1' :
		                        	  status = Main_menue ;
    44a4:	fe 01       	movw	r30, r28
    44a6:	e9 51       	subi	r30, 0x19	; 25
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	83 e0       	ldi	r24, 0x03	; 3
    44ac:	80 83       	st	Z, r24
    44ae:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>
		                        	   break;
		                        	  case '2' :

		                        	       // DIO_toggle('C',0);
		                        	        //DIO_toggle('C',1);
		                        	        DIO_toggle('C',2);
    44b2:	83 e4       	ldi	r24, 0x43	; 67
    44b4:	62 e0       	ldi	r22, 0x02	; 2
    44b6:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_toggle>
    44ba:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <main+0xc4>

000044be <SERVO_ON>:
	}
}


void SERVO_ON(void)
{
    44be:	df 93       	push	r29
    44c0:	cf 93       	push	r28
    44c2:	cd b7       	in	r28, 0x3d	; 61
    44c4:	de b7       	in	r29, 0x3e	; 62
    44c6:	6e 97       	sbiw	r28, 0x1e	; 30
    44c8:	0f b6       	in	r0, 0x3f	; 63
    44ca:	f8 94       	cli
    44cc:	de bf       	out	0x3e, r29	; 62
    44ce:	0f be       	out	0x3f, r0	; 63
    44d0:	cd bf       	out	0x3d, r28	; 61


	u16 u16Counter;

	// Move to 90 degrees
	for (u16Counter = 750; u16Counter < 1500; u16Counter++)
    44d2:	8e ee       	ldi	r24, 0xEE	; 238
    44d4:	92 e0       	ldi	r25, 0x02	; 2
    44d6:	9e 8f       	std	Y+30, r25	; 0x1e
    44d8:	8d 8f       	std	Y+29, r24	; 0x1d
    44da:	80 c0       	rjmp	.+256    	; 0x45dc <SERVO_ON+0x11e>
	{
		TIM1_voidSetCmpARegValue(u16Counter);
    44dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44e0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <TIM1_voidSetCmpARegValue>
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	a0 e2       	ldi	r26, 0x20	; 32
    44ea:	b1 e4       	ldi	r27, 0x41	; 65
    44ec:	89 8f       	std	Y+25, r24	; 0x19
    44ee:	9a 8f       	std	Y+26, r25	; 0x1a
    44f0:	ab 8f       	std	Y+27, r26	; 0x1b
    44f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f4:	69 8d       	ldd	r22, Y+25	; 0x19
    44f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	4a ef       	ldi	r20, 0xFA	; 250
    4502:	54 e4       	ldi	r21, 0x44	; 68
    4504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4508:	dc 01       	movw	r26, r24
    450a:	cb 01       	movw	r24, r22
    450c:	8d 8b       	std	Y+21, r24	; 0x15
    450e:	9e 8b       	std	Y+22, r25	; 0x16
    4510:	af 8b       	std	Y+23, r26	; 0x17
    4512:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4514:	6d 89       	ldd	r22, Y+21	; 0x15
    4516:	7e 89       	ldd	r23, Y+22	; 0x16
    4518:	8f 89       	ldd	r24, Y+23	; 0x17
    451a:	98 8d       	ldd	r25, Y+24	; 0x18
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	40 e8       	ldi	r20, 0x80	; 128
    4522:	5f e3       	ldi	r21, 0x3F	; 63
    4524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4528:	88 23       	and	r24, r24
    452a:	2c f4       	brge	.+10     	; 0x4536 <SERVO_ON+0x78>
		__ticks = 1;
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	9c 8b       	std	Y+20, r25	; 0x14
    4532:	8b 8b       	std	Y+19, r24	; 0x13
    4534:	3f c0       	rjmp	.+126    	; 0x45b4 <SERVO_ON+0xf6>
	else if (__tmp > 65535)
    4536:	6d 89       	ldd	r22, Y+21	; 0x15
    4538:	7e 89       	ldd	r23, Y+22	; 0x16
    453a:	8f 89       	ldd	r24, Y+23	; 0x17
    453c:	98 8d       	ldd	r25, Y+24	; 0x18
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	3f ef       	ldi	r19, 0xFF	; 255
    4542:	4f e7       	ldi	r20, 0x7F	; 127
    4544:	57 e4       	ldi	r21, 0x47	; 71
    4546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    454a:	18 16       	cp	r1, r24
    454c:	4c f5       	brge	.+82     	; 0x45a0 <SERVO_ON+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    454e:	69 8d       	ldd	r22, Y+25	; 0x19
    4550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	40 e2       	ldi	r20, 0x20	; 32
    455c:	51 e4       	ldi	r21, 0x41	; 65
    455e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	bc 01       	movw	r22, r24
    4568:	cd 01       	movw	r24, r26
    456a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
    4572:	9c 8b       	std	Y+20, r25	; 0x14
    4574:	8b 8b       	std	Y+19, r24	; 0x13
    4576:	0f c0       	rjmp	.+30     	; 0x4596 <SERVO_ON+0xd8>
    4578:	88 ec       	ldi	r24, 0xC8	; 200
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	9a 8b       	std	Y+18, r25	; 0x12
    457e:	89 8b       	std	Y+17, r24	; 0x11
    4580:	89 89       	ldd	r24, Y+17	; 0x11
    4582:	9a 89       	ldd	r25, Y+18	; 0x12
    4584:	01 97       	sbiw	r24, 0x01	; 1
    4586:	f1 f7       	brne	.-4      	; 0x4584 <SERVO_ON+0xc6>
    4588:	9a 8b       	std	Y+18, r25	; 0x12
    458a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458c:	8b 89       	ldd	r24, Y+19	; 0x13
    458e:	9c 89       	ldd	r25, Y+20	; 0x14
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	9c 8b       	std	Y+20, r25	; 0x14
    4594:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4596:	8b 89       	ldd	r24, Y+19	; 0x13
    4598:	9c 89       	ldd	r25, Y+20	; 0x14
    459a:	00 97       	sbiw	r24, 0x00	; 0
    459c:	69 f7       	brne	.-38     	; 0x4578 <SERVO_ON+0xba>
    459e:	14 c0       	rjmp	.+40     	; 0x45c8 <SERVO_ON+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a0:	6d 89       	ldd	r22, Y+21	; 0x15
    45a2:	7e 89       	ldd	r23, Y+22	; 0x16
    45a4:	8f 89       	ldd	r24, Y+23	; 0x17
    45a6:	98 8d       	ldd	r25, Y+24	; 0x18
    45a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ac:	dc 01       	movw	r26, r24
    45ae:	cb 01       	movw	r24, r22
    45b0:	9c 8b       	std	Y+20, r25	; 0x14
    45b2:	8b 8b       	std	Y+19, r24	; 0x13
    45b4:	8b 89       	ldd	r24, Y+19	; 0x13
    45b6:	9c 89       	ldd	r25, Y+20	; 0x14
    45b8:	98 8b       	std	Y+16, r25	; 0x10
    45ba:	8f 87       	std	Y+15, r24	; 0x0f
    45bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    45be:	98 89       	ldd	r25, Y+16	; 0x10
    45c0:	01 97       	sbiw	r24, 0x01	; 1
    45c2:	f1 f7       	brne	.-4      	; 0x45c0 <SERVO_ON+0x102>
    45c4:	98 8b       	std	Y+16, r25	; 0x10
    45c6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		u16Counter	=        u16Counter+5	;
    45c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45cc:	05 96       	adiw	r24, 0x05	; 5
    45ce:	9e 8f       	std	Y+30, r25	; 0x1e
    45d0:	8d 8f       	std	Y+29, r24	; 0x1d


	u16 u16Counter;

	// Move to 90 degrees
	for (u16Counter = 750; u16Counter < 1500; u16Counter++)
    45d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45d6:	01 96       	adiw	r24, 0x01	; 1
    45d8:	9e 8f       	std	Y+30, r25	; 0x1e
    45da:	8d 8f       	std	Y+29, r24	; 0x1d
    45dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45e0:	25 e0       	ldi	r18, 0x05	; 5
    45e2:	8c 3d       	cpi	r24, 0xDC	; 220
    45e4:	92 07       	cpc	r25, r18
    45e6:	08 f4       	brcc	.+2      	; 0x45ea <SERVO_ON+0x12c>
    45e8:	79 cf       	rjmp	.-270    	; 0x44dc <SERVO_ON+0x1e>
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	aa ef       	ldi	r26, 0xFA	; 250
    45f0:	b3 e4       	ldi	r27, 0x43	; 67
    45f2:	8b 87       	std	Y+11, r24	; 0x0b
    45f4:	9c 87       	std	Y+12, r25	; 0x0c
    45f6:	ad 87       	std	Y+13, r26	; 0x0d
    45f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    45fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4600:	9e 85       	ldd	r25, Y+14	; 0x0e
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	4a ef       	ldi	r20, 0xFA	; 250
    4608:	54 e4       	ldi	r21, 0x44	; 68
    460a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	8f 83       	std	Y+7, r24	; 0x07
    4614:	98 87       	std	Y+8, r25	; 0x08
    4616:	a9 87       	std	Y+9, r26	; 0x09
    4618:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    461a:	6f 81       	ldd	r22, Y+7	; 0x07
    461c:	78 85       	ldd	r23, Y+8	; 0x08
    461e:	89 85       	ldd	r24, Y+9	; 0x09
    4620:	9a 85       	ldd	r25, Y+10	; 0x0a
    4622:	20 e0       	ldi	r18, 0x00	; 0
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	40 e8       	ldi	r20, 0x80	; 128
    4628:	5f e3       	ldi	r21, 0x3F	; 63
    462a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    462e:	88 23       	and	r24, r24
    4630:	2c f4       	brge	.+10     	; 0x463c <SERVO_ON+0x17e>
		__ticks = 1;
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	9e 83       	std	Y+6, r25	; 0x06
    4638:	8d 83       	std	Y+5, r24	; 0x05
    463a:	3f c0       	rjmp	.+126    	; 0x46ba <SERVO_ON+0x1fc>
	else if (__tmp > 65535)
    463c:	6f 81       	ldd	r22, Y+7	; 0x07
    463e:	78 85       	ldd	r23, Y+8	; 0x08
    4640:	89 85       	ldd	r24, Y+9	; 0x09
    4642:	9a 85       	ldd	r25, Y+10	; 0x0a
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	3f ef       	ldi	r19, 0xFF	; 255
    4648:	4f e7       	ldi	r20, 0x7F	; 127
    464a:	57 e4       	ldi	r21, 0x47	; 71
    464c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4650:	18 16       	cp	r1, r24
    4652:	4c f5       	brge	.+82     	; 0x46a6 <SERVO_ON+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4654:	6b 85       	ldd	r22, Y+11	; 0x0b
    4656:	7c 85       	ldd	r23, Y+12	; 0x0c
    4658:	8d 85       	ldd	r24, Y+13	; 0x0d
    465a:	9e 85       	ldd	r25, Y+14	; 0x0e
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e2       	ldi	r20, 0x20	; 32
    4662:	51 e4       	ldi	r21, 0x41	; 65
    4664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	bc 01       	movw	r22, r24
    466e:	cd 01       	movw	r24, r26
    4670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	9e 83       	std	Y+6, r25	; 0x06
    467a:	8d 83       	std	Y+5, r24	; 0x05
    467c:	0f c0       	rjmp	.+30     	; 0x469c <SERVO_ON+0x1de>
    467e:	88 ec       	ldi	r24, 0xC8	; 200
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	9c 83       	std	Y+4, r25	; 0x04
    4684:	8b 83       	std	Y+3, r24	; 0x03
    4686:	8b 81       	ldd	r24, Y+3	; 0x03
    4688:	9c 81       	ldd	r25, Y+4	; 0x04
    468a:	01 97       	sbiw	r24, 0x01	; 1
    468c:	f1 f7       	brne	.-4      	; 0x468a <SERVO_ON+0x1cc>
    468e:	9c 83       	std	Y+4, r25	; 0x04
    4690:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4692:	8d 81       	ldd	r24, Y+5	; 0x05
    4694:	9e 81       	ldd	r25, Y+6	; 0x06
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	9e 83       	std	Y+6, r25	; 0x06
    469a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    469c:	8d 81       	ldd	r24, Y+5	; 0x05
    469e:	9e 81       	ldd	r25, Y+6	; 0x06
    46a0:	00 97       	sbiw	r24, 0x00	; 0
    46a2:	69 f7       	brne	.-38     	; 0x467e <SERVO_ON+0x1c0>
    46a4:	14 c0       	rjmp	.+40     	; 0x46ce <SERVO_ON+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a6:	6f 81       	ldd	r22, Y+7	; 0x07
    46a8:	78 85       	ldd	r23, Y+8	; 0x08
    46aa:	89 85       	ldd	r24, Y+9	; 0x09
    46ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b2:	dc 01       	movw	r26, r24
    46b4:	cb 01       	movw	r24, r22
    46b6:	9e 83       	std	Y+6, r25	; 0x06
    46b8:	8d 83       	std	Y+5, r24	; 0x05
    46ba:	8d 81       	ldd	r24, Y+5	; 0x05
    46bc:	9e 81       	ldd	r25, Y+6	; 0x06
    46be:	9a 83       	std	Y+2, r25	; 0x02
    46c0:	89 83       	std	Y+1, r24	; 0x01
    46c2:	89 81       	ldd	r24, Y+1	; 0x01
    46c4:	9a 81       	ldd	r25, Y+2	; 0x02
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	f1 f7       	brne	.-4      	; 0x46c6 <SERVO_ON+0x208>
    46ca:	9a 83       	std	Y+2, r25	; 0x02
    46cc:	89 83       	std	Y+1, r24	; 0x01

	// Wait for stability (optional)
	_delay_ms(500);

	// Stop at 90 degrees
	TIM1_voidSetCmpARegValue(1500);  // Adjust the value for precise 90 degrees
    46ce:	8c ed       	ldi	r24, 0xDC	; 220
    46d0:	95 e0       	ldi	r25, 0x05	; 5
    46d2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <TIM1_voidSetCmpARegValue>

	// You can add an optional delay for stability before returning, if needed
	// _delay_ms(500);
}
    46d6:	6e 96       	adiw	r28, 0x1e	; 30
    46d8:	0f b6       	in	r0, 0x3f	; 63
    46da:	f8 94       	cli
    46dc:	de bf       	out	0x3e, r29	; 62
    46de:	0f be       	out	0x3f, r0	; 63
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	cf 91       	pop	r28
    46e4:	df 91       	pop	r29
    46e6:	08 95       	ret

000046e8 <__udivmodsi4>:
    46e8:	a1 e2       	ldi	r26, 0x21	; 33
    46ea:	1a 2e       	mov	r1, r26
    46ec:	aa 1b       	sub	r26, r26
    46ee:	bb 1b       	sub	r27, r27
    46f0:	fd 01       	movw	r30, r26
    46f2:	0d c0       	rjmp	.+26     	; 0x470e <__udivmodsi4_ep>

000046f4 <__udivmodsi4_loop>:
    46f4:	aa 1f       	adc	r26, r26
    46f6:	bb 1f       	adc	r27, r27
    46f8:	ee 1f       	adc	r30, r30
    46fa:	ff 1f       	adc	r31, r31
    46fc:	a2 17       	cp	r26, r18
    46fe:	b3 07       	cpc	r27, r19
    4700:	e4 07       	cpc	r30, r20
    4702:	f5 07       	cpc	r31, r21
    4704:	20 f0       	brcs	.+8      	; 0x470e <__udivmodsi4_ep>
    4706:	a2 1b       	sub	r26, r18
    4708:	b3 0b       	sbc	r27, r19
    470a:	e4 0b       	sbc	r30, r20
    470c:	f5 0b       	sbc	r31, r21

0000470e <__udivmodsi4_ep>:
    470e:	66 1f       	adc	r22, r22
    4710:	77 1f       	adc	r23, r23
    4712:	88 1f       	adc	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	1a 94       	dec	r1
    4718:	69 f7       	brne	.-38     	; 0x46f4 <__udivmodsi4_loop>
    471a:	60 95       	com	r22
    471c:	70 95       	com	r23
    471e:	80 95       	com	r24
    4720:	90 95       	com	r25
    4722:	9b 01       	movw	r18, r22
    4724:	ac 01       	movw	r20, r24
    4726:	bd 01       	movw	r22, r26
    4728:	cf 01       	movw	r24, r30
    472a:	08 95       	ret

0000472c <__prologue_saves__>:
    472c:	2f 92       	push	r2
    472e:	3f 92       	push	r3
    4730:	4f 92       	push	r4
    4732:	5f 92       	push	r5
    4734:	6f 92       	push	r6
    4736:	7f 92       	push	r7
    4738:	8f 92       	push	r8
    473a:	9f 92       	push	r9
    473c:	af 92       	push	r10
    473e:	bf 92       	push	r11
    4740:	cf 92       	push	r12
    4742:	df 92       	push	r13
    4744:	ef 92       	push	r14
    4746:	ff 92       	push	r15
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	cd b7       	in	r28, 0x3d	; 61
    4752:	de b7       	in	r29, 0x3e	; 62
    4754:	ca 1b       	sub	r28, r26
    4756:	db 0b       	sbc	r29, r27
    4758:	0f b6       	in	r0, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	de bf       	out	0x3e, r29	; 62
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	cd bf       	out	0x3d, r28	; 61
    4762:	09 94       	ijmp

00004764 <__epilogue_restores__>:
    4764:	2a 88       	ldd	r2, Y+18	; 0x12
    4766:	39 88       	ldd	r3, Y+17	; 0x11
    4768:	48 88       	ldd	r4, Y+16	; 0x10
    476a:	5f 84       	ldd	r5, Y+15	; 0x0f
    476c:	6e 84       	ldd	r6, Y+14	; 0x0e
    476e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4770:	8c 84       	ldd	r8, Y+12	; 0x0c
    4772:	9b 84       	ldd	r9, Y+11	; 0x0b
    4774:	aa 84       	ldd	r10, Y+10	; 0x0a
    4776:	b9 84       	ldd	r11, Y+9	; 0x09
    4778:	c8 84       	ldd	r12, Y+8	; 0x08
    477a:	df 80       	ldd	r13, Y+7	; 0x07
    477c:	ee 80       	ldd	r14, Y+6	; 0x06
    477e:	fd 80       	ldd	r15, Y+5	; 0x05
    4780:	0c 81       	ldd	r16, Y+4	; 0x04
    4782:	1b 81       	ldd	r17, Y+3	; 0x03
    4784:	aa 81       	ldd	r26, Y+2	; 0x02
    4786:	b9 81       	ldd	r27, Y+1	; 0x01
    4788:	ce 0f       	add	r28, r30
    478a:	d1 1d       	adc	r29, r1
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	ed 01       	movw	r28, r26
    4798:	08 95       	ret

0000479a <_exit>:
    479a:	f8 94       	cli

0000479c <__stop_program>:
    479c:	ff cf       	rjmp	.-2      	; 0x479c <__stop_program>
